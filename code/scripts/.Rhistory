<<<<<<< HEAD
<<<<<<< HEAD
race_and_income <- selected_data %>%
dplyr::select(INSTNM, UGDS, UG, UGDS_WHITE, UGDS_BLACK, UGDS_HISP, UGDS_ASIAN, UGDS_AIAN, UGDS_NHPI, UGDS_2MOR, UGDS_NRA, UGDS_UNKN, UGDS_WHITENH,
=======
response=which(colnames(dataframe)==character)
dataframe[,setdiff(94:98, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
dataframe= subset(dataframe, select=c(setdiff(1:ncol(dataframe),response), response))
return(dataframe)
}
lasso_select=function(dataframe, character){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=data.frame(row.names(coef(sparse_vector))[relevant], coef(sparse_vector)[relevant]) #Printing out the names of our relevant variables!
return(lasso_var)
}
bic_select=function(dataframe, character){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(lm_obj$coefficients)
return(bic_var)
}
data=read.csv("../../data/MERGED2014_15_PP.csv")
x_variables <- selected_data %>%
select(UNITID, PREDDEG, MAIN, CONTROL, INSTNM, CITY, ZIP, ST_FIPS, REGION, LOCALE2, ADM_RATE, ADM_RATE_ALL, SATVR25, SATVR75, SATMT25, SATMT75, SATWR25,
SATWR75, SATVRMID, SATMTMID, SATWRMID, ACTCM25, ACTCM75, ACTEN25, ACTEN75, ACTMT25, ACTMT75, ACTWR25, ACTWR75, ACTCMMID,
ACTENMID, ACTMTMID, ACTWRMID, SAT_AVG, SAT_AVG_ALL, PCIP01, PCIP03, PCIP04, PCIP05, PCIP09, PCIP10, PCIP11, PCIP12, PCIP13,
PCIP14, PCIP15, PCIP16, PCIP19, PCIP22, PCIP23, PCIP24, PCIP25, PCIP26, PCIP27, PCIP29, PCIP30, PCIP31, PCIP38, PCIP39,
PCIP40, PCIP41, PCIP42, PCIP43, PCIP44, PCIP45, PCIP46, PCIP47, PCIP48, PCIP49, PCIP50, PCIP51, PCIP52, PCIP54, NPT4_PUB,
NPT41_PUB, NPT42_PUB, NPT43_PUB, NPT44_PUB, NPT45_PUB, NUM4_PUB, NUM41_PUB, NUM42_PUB, NUM43_PUB, NUM44_PUB, NUM45_PUB,
COSTT4_A, TUITIONFEE_IN, TUITIONFEE_OUT, AVGFACSAL, PFTFAC, OVERALL_YR4_N, LO_INC_YR4_N, MD_INC_YR4_N, HI_INC_YR4_N, DEP_YR4_N,
IND_YR4_N, FEMALE_YR4_N, MALE_YR4_N, FIRSTGEN_YR4_N, NOT1STGEN_YR4_N, OVERALL_YR6_N, LO_INC_YR6_N, MD_INC_YR6_N, HI_INC_YR6_N,
DEP_YR6_N, IND_YR6_N, FEMALE_YR6_N, MALE_YR6_N, FIRSTGEN_YR6_N, NOT1STGEN_YR6_N, AGE_ENTRY, AGEGE24, FEMALE, MARRIED, DEPENDENT,
VETERAN, FIRST_GEN)
y_variables <- selected_data %>%
select(INSTNM, C150_4, C150_4_HISP,C150_4_AIAN, C150_4_WHITE, C150_4_BLACK,C150_4_ASIAN, C150_4_NHPI, COMP_ORIG_YR6_RT, COMP_4YR_TRANS_YR6_RT, LO_INC_COMP_ORIG_YR6_RT, LO_INC_COMP_4YR_TRANS_YR6_RT, MD_INC_COMP_ORIG_YR6_RT,
MD_INC_COMP_4YR_TRANS_YR6_RT, HI_INC_COMP_ORIG_YR6_RT, HI_INC_COMP_4YR_TRANS_YR6_RT, DEP_COMP_ORIG_YR6_RT, DEP_COMP_4YR_TRANS_YR6_RT,
IND_COMP_ORIG_YR6_RT, IND_COMP_4YR_TRANS_YR6_RT, FEMALE_COMP_ORIG_YR6_RT, FEMALE_COMP_4YR_TRANS_YR6_RT, MALE_COMP_ORIG_YR6_RT,
MALE_COMP_4YR_TRANS_YR6_RT, FIRSTGEN_COMP_ORIG_YR6_RT, FIRSTGEN_COMP_4YR_TRANS_YR6_RT, NOT1STGEN_COMP_ORIG_YR6_RT,
NOT1STGEN_COMP_4YR_TRANS_YR6_RT)
race_and_income <- selected_data %>%
select(INSTNM, UGDS, UG, UGDS_WHITE, UGDS_BLACK, UGDS_HISP, UGDS_ASIAN, UGDS_AIAN, UGDS_NHPI, UGDS_2MOR, UGDS_NRA, UGDS_UNKN, UGDS_WHITENH,
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
UGDS_BLACKNH, UGDS_API, UGDS_AIANOLD, UGDS_HISPOLD, UG_NRA, UG_UNKN, UG_WHITENH, UG_BLACKNH, UG_API, UG_AIANOLD, UG_HISPOLD,
PPTUG_EF, PPTUG_EF2, CURROPER, NPT4_048_PUB, NPT4_3075_PUB, NPT4_75UP_PUB)
merge_1 <- merge(x_variables, y_variables, by = "INSTNM")
clean_data <- merge(merge_1, race_and_income, by = "INSTNM")
<<<<<<< HEAD
#checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
}
=======
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
#Converting types of variables that don't make any sense (and getting rid of some variables)
clean_data$PREDDEG=as.factor(clean_data$PREDDEG) #PREDDEG tells us the predominant type of degree given in a univ
clean_data$CITY=NULL  #Don't need city variable in my opinion
clean_data$ZIP=NULL #Don't need zip code variable in my opinion
clean_data$ST_FIPS= as.factor(clean_data$ST_FIPS) #State should not be an integer variable
clean_data$ST_FIPS=NULL #Don't need state variable when we have a region variable
<<<<<<< HEAD
View(clean_data)
clean_data$REGION= as.factor(clean_data$REGION)
View(clean_data)
clean_data$LOCALE2=NULL #Too many NULL values here
clean_data$ADM_RATE=as.numeric(clean_data$ADM_RATE)
View(clean_data)
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric)
View(clean_data)
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$LOCALE2=NULL # Too many NULL values here
View(clean_daata)
View(clean_data)
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE))
View(clean_data)
clean_data$ADM_RATE_ALL=NULL
View(clean_data)
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric)
View(clean_data)
clean_data[,c(86:105,107,114:133,135,145:156,158)]=NULL
View(clean_data)
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric)
View(clean_data)
clean_data$CURROPER=NULL
clean_data[,7:85]=apply(clean_data[,7:85], 2, as.numeric)
View(clean_data)
clean_data[,c(86:105,107,120:139,141,151:162,164)]=NULL
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric)
clean_data$CURROPER=NULL
View(clean_data)
clean_data[,7:85]=apply(clean_data[,7:85], 2, as.numeric)
View(clean_data)
clean_data[,7:85]=apply(clean_data[,7:85], 2, as.numeric)
clean_data[,c(86:105,107,120:139,141,151:162,164)]=NULL
View(clean_data)
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric)
View(clean_data)
clean_data$CURROPER=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL
clean_data$INSTNM=NULL
View(clean_data)
clean_data$INSTNM=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL
clean_data[,3:7]=apply(clean_data[,3:7] , 2, as.numeric)
View(clean_data)
for(i in 1:ncol(clean_data)){
clean_data[is.na(clean_data[,i]),i]=mean(clean_data[,i], na.rm=TRUE)
}
Clean_data
#----------------------------------------------------------------------
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3/code/scripts")
#data=read.csv("../../data/MERGED2014_15_PP.csv")
#clean_data=read.csv("../../data/clean_data.csv")
library(dplyr)
#read data set
args <- commandArgs(trailingOnly=TRUE)
data <- read.csv(args[1])
#data cleaning
selected_data <- data %>%
filter(PREDDEG == 3) %>% #Degree awarded predominantly bachelor
filter(MAIN == 1) %>% #Main campus
filter(CONTROL == 1) #Public schools
#variables we are going to use
x_variables <- selected_data %>%
dplyr::select(UNITID, PREDDEG, MAIN, CONTROL, INSTNM, CITY, ZIP, ST_FIPS, REGION, LOCALE2, ADM_RATE, SATVR25, SATVR75, SATMT25, SATMT75, SATWR25,
SATWR75, SATVRMID, SATMTMID, SATWRMID, ACTCM25, ACTCM75, ACTEN25, ACTEN75, ACTMT25, ACTMT75, ACTWR25, ACTWR75, ACTCMMID,
ACTENMID, ACTMTMID, ACTWRMID, SAT_AVG, PCIP01, PCIP03, PCIP04, PCIP05, PCIP09, PCIP10, PCIP11, PCIP12, PCIP13,
=======
clean_data$REGION= as.factor(clean_data$REGION) #Region should not be an integer variable
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
View(clean_data)
clean_data[,7:85]=apply(clean_data[,7:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
View(clean_data)
View(clean_data[,101:ncol(clean_data)])
x_variables <- selected_data %>%
select(UNITID, PREDDEG, MAIN, CONTROL, INSTNM, CITY, ZIP, ST_FIPS, REGION, LOCALE2, ADM_RATE, ADM_RATE_ALL, SATVR25, SATVR75, SATMT25, SATMT75, SATWR25,
SATWR75, SATVRMID, SATMTMID, SATWRMID, ACTCM25, ACTCM75, ACTEN25, ACTEN75, ACTMT25, ACTMT75, ACTWR25, ACTWR75, ACTCMMID,
ACTENMID, ACTMTMID, ACTWRMID, SAT_AVG, SAT_AVG_ALL, PCIP01, PCIP03, PCIP04, PCIP05, PCIP09, PCIP10, PCIP11, PCIP12, PCIP13,
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
PCIP14, PCIP15, PCIP16, PCIP19, PCIP22, PCIP23, PCIP24, PCIP25, PCIP26, PCIP27, PCIP29, PCIP30, PCIP31, PCIP38, PCIP39,
PCIP40, PCIP41, PCIP42, PCIP43, PCIP44, PCIP45, PCIP46, PCIP47, PCIP48, PCIP49, PCIP50, PCIP51, PCIP52, PCIP54, NPT4_PUB,
NPT41_PUB, NPT42_PUB, NPT43_PUB, NPT44_PUB, NPT45_PUB, NUM4_PUB, NUM41_PUB, NUM42_PUB, NUM43_PUB, NUM44_PUB, NUM45_PUB,
COSTT4_A, TUITIONFEE_IN, TUITIONFEE_OUT, AVGFACSAL, PFTFAC, OVERALL_YR4_N, LO_INC_YR4_N, MD_INC_YR4_N, HI_INC_YR4_N, DEP_YR4_N,
IND_YR4_N, FEMALE_YR4_N, MALE_YR4_N, FIRSTGEN_YR4_N, NOT1STGEN_YR4_N, OVERALL_YR6_N, LO_INC_YR6_N, MD_INC_YR6_N, HI_INC_YR6_N,
DEP_YR6_N, IND_YR6_N, FEMALE_YR6_N, MALE_YR6_N, FIRSTGEN_YR6_N, NOT1STGEN_YR6_N, AGE_ENTRY, AGEGE24, FEMALE, MARRIED, DEPENDENT,
VETERAN, FIRST_GEN)
y_variables <- selected_data %>%
<<<<<<< HEAD
dplyr::select(INSTNM, C150_4, C150_4_HISP,C150_4_AIAN, C150_4_WHITE, C150_4_BLACK,C150_4_ASIAN, C150_4_NHPI, COMP_ORIG_YR6_RT, COMP_4YR_TRANS_YR6_RT, LO_INC_COMP_ORIG_YR6_RT, LO_INC_COMP_4YR_TRANS_YR6_RT, MD_INC_COMP_ORIG_YR6_RT,
=======
select(INSTNM, C150_4, C150_4_HISP,C150_4_AIAN, C150_4_WHITE, C150_4_BLACK,C150_4_ASIAN, C150_4_NHPI, COMP_ORIG_YR6_RT, COMP_4YR_TRANS_YR6_RT, LO_INC_COMP_ORIG_YR6_RT, LO_INC_COMP_4YR_TRANS_YR6_RT, MD_INC_COMP_ORIG_YR6_RT,
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
MD_INC_COMP_4YR_TRANS_YR6_RT, HI_INC_COMP_ORIG_YR6_RT, HI_INC_COMP_4YR_TRANS_YR6_RT, DEP_COMP_ORIG_YR6_RT, DEP_COMP_4YR_TRANS_YR6_RT,
IND_COMP_ORIG_YR6_RT, IND_COMP_4YR_TRANS_YR6_RT, FEMALE_COMP_ORIG_YR6_RT, FEMALE_COMP_4YR_TRANS_YR6_RT, MALE_COMP_ORIG_YR6_RT,
MALE_COMP_4YR_TRANS_YR6_RT, FIRSTGEN_COMP_ORIG_YR6_RT, FIRSTGEN_COMP_4YR_TRANS_YR6_RT, NOT1STGEN_COMP_ORIG_YR6_RT,
NOT1STGEN_COMP_4YR_TRANS_YR6_RT)
race_and_income <- selected_data %>%
<<<<<<< HEAD
dplyr::select(INSTNM, UGDS, UG, UGDS_WHITE, UGDS_BLACK, UGDS_HISP, UGDS_ASIAN, UGDS_AIAN, UGDS_NHPI, UGDS_2MOR, UGDS_NRA, UGDS_UNKN, UGDS_WHITENH,
=======
select(INSTNM, UGDS, UG, UGDS_WHITE, UGDS_BLACK, UGDS_HISP, UGDS_ASIAN, UGDS_AIAN, UGDS_NHPI, UGDS_2MOR, UGDS_NRA, UGDS_UNKN, UGDS_WHITENH,
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
UGDS_BLACKNH, UGDS_API, UGDS_AIANOLD, UGDS_HISPOLD, UG_NRA, UG_UNKN, UG_WHITENH, UG_BLACKNH, UG_API, UG_AIANOLD, UG_HISPOLD,
PPTUG_EF, PPTUG_EF2, CURROPER, NPT4_048_PUB, NPT4_3075_PUB, NPT4_75UP_PUB)
merge_1 <- merge(x_variables, y_variables, by = "INSTNM")
clean_data <- merge(merge_1, race_and_income, by = "INSTNM")
<<<<<<< HEAD
#checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
}
=======
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
#Converting types of variables that don't make any sense (and getting rid of some variables)
clean_data$PREDDEG=as.factor(clean_data$PREDDEG) #PREDDEG tells us the predominant type of degree given in a univ
clean_data$CITY=NULL  #Don't need city variable in my opinion
clean_data$ZIP=NULL #Don't need zip code variable in my opinion
clean_data$ST_FIPS= as.factor(clean_data$ST_FIPS) #State should not be an integer variable
clean_data$ST_FIPS=NULL #Don't need state variable when we have a region variable
clean_data$REGION= as.factor(clean_data$REGION) #Region should not be an integer variable
<<<<<<< HEAD
clean_data$LOCALE2=NULL #Too many NULL values here
clean_data$ADM_RATE=as.numeric(clean_data$ADM_RATE) #Admission rates shouldn't be a factor
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #Converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,114:133,135,145:156,158)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #Converting all these factors into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
=======
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
clean_data[,7:85]=apply(clean_data[,7:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,120:139,141,151:162,164)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #converting all these factors  into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
#getting rid of 4 more useless variables
clean_data$INSTNM=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL # all values are 3, so useless variable
clean_data[,3:7]=apply(clean_data[,3:7] , 2, as.numeric)
<<<<<<< HEAD
View(clean_data)
=======
class(clean_data[,80])
with NA values... lets replace each NA value with the column average
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
for(i in 1:ncol(clean_data)){
clean_data[is.na(clean_data[,i]),i]=mean(clean_data[,i], na.rm=TRUE)
}
#converting categorical columns into multiple binary columns
clean_data=model.matrix(~., clean_data)
clean_data=as.data.frame(clean_data)[,-1]
#scaling non-categorical variables
for (i in c(10:ncol(clean_data))){
clean_data[,i]=scale(clean_data[,i])
}
<<<<<<< HEAD
=======
View(clean_data)
ncol(clean_data)
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
#clean race and income and y and x variables
write.csv(clean_data, file = '../../data/clean_data.csv')
write.csv(race_and_income, file='../../data/race_and_income.csv')
write.csv(y_variables, file='../../data/y_variables.csv')
write.csv(x_variables, file='../../data/x_variables.csv')
<<<<<<< HEAD
View(clean_data)
#----------------------------------------------------------------------
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3/code/scripts")
#data=read.csv("../../data/MERGED2014_15_PP.csv")
#clean_data=read.csv("../../data/clean_data.csv")
library(dplyr)
#read data set
args <- commandArgs(trailingOnly=TRUE)
data <- read.csv(args[1])
#data cleaning
selected_data <- data %>%
filter(PREDDEG == 3) %>% #Degree awarded predominantly bachelor
filter(MAIN == 1) %>% #Main campus
filter(CONTROL == 1) #Public schools
#variables we are going to use
x_variables <- selected_data %>%
dplyr::select(UNITID, PREDDEG, MAIN, CONTROL, INSTNM, CITY, ZIP, ST_FIPS, REGION, LOCALE2, ADM_RATE, SATVR25, SATVR75, SATMT25, SATMT75, SATWR25,
SATWR75, SATVRMID, SATMTMID, SATWRMID, ACTCM25, ACTCM75, ACTEN25, ACTEN75, ACTMT25, ACTMT75, ACTWR25, ACTWR75, ACTCMMID,
ACTENMID, ACTMTMID, ACTWRMID, SAT_AVG, PCIP01, PCIP03, PCIP04, PCIP05, PCIP09, PCIP10, PCIP11, PCIP12, PCIP13,
PCIP14, PCIP15, PCIP16, PCIP19, PCIP22, PCIP23, PCIP24, PCIP25, PCIP26, PCIP27, PCIP29, PCIP30, PCIP31, PCIP38, PCIP39,
PCIP40, PCIP41, PCIP42, PCIP43, PCIP44, PCIP45, PCIP46, PCIP47, PCIP48, PCIP49, PCIP50, PCIP51, PCIP52, PCIP54, NPT4_PUB,
NPT41_PUB, NPT42_PUB, NPT43_PUB, NPT44_PUB, NPT45_PUB, NUM4_PUB, NUM41_PUB, NUM42_PUB, NUM43_PUB, NUM44_PUB, NUM45_PUB,
COSTT4_A, TUITIONFEE_IN, TUITIONFEE_OUT, AVGFACSAL, PFTFAC, OVERALL_YR4_N, LO_INC_YR4_N, MD_INC_YR4_N, HI_INC_YR4_N, DEP_YR4_N,
IND_YR4_N, FEMALE_YR4_N, MALE_YR4_N, FIRSTGEN_YR4_N, NOT1STGEN_YR4_N, OVERALL_YR6_N, LO_INC_YR6_N, MD_INC_YR6_N, HI_INC_YR6_N,
DEP_YR6_N, IND_YR6_N, FEMALE_YR6_N, MALE_YR6_N, FIRSTGEN_YR6_N, NOT1STGEN_YR6_N, AGE_ENTRY, AGEGE24, FEMALE, MARRIED, DEPENDENT,
VETERAN, FIRST_GEN)
y_variables <- selected_data %>%
dplyr::select(INSTNM, C150_4, C150_4_HISP,C150_4_AIAN, C150_4_WHITE, C150_4_BLACK,C150_4_ASIAN, C150_4_NHPI, COMP_ORIG_YR6_RT, COMP_4YR_TRANS_YR6_RT, LO_INC_COMP_ORIG_YR6_RT, LO_INC_COMP_4YR_TRANS_YR6_RT, MD_INC_COMP_ORIG_YR6_RT,
MD_INC_COMP_4YR_TRANS_YR6_RT, HI_INC_COMP_ORIG_YR6_RT, HI_INC_COMP_4YR_TRANS_YR6_RT, DEP_COMP_ORIG_YR6_RT, DEP_COMP_4YR_TRANS_YR6_RT,
IND_COMP_ORIG_YR6_RT, IND_COMP_4YR_TRANS_YR6_RT, FEMALE_COMP_ORIG_YR6_RT, FEMALE_COMP_4YR_TRANS_YR6_RT, MALE_COMP_ORIG_YR6_RT,
MALE_COMP_4YR_TRANS_YR6_RT, FIRSTGEN_COMP_ORIG_YR6_RT, FIRSTGEN_COMP_4YR_TRANS_YR6_RT, NOT1STGEN_COMP_ORIG_YR6_RT,
NOT1STGEN_COMP_4YR_TRANS_YR6_RT)
race_and_income <- selected_data %>%
dplyr::select(INSTNM, UGDS, UG, UGDS_WHITE, UGDS_BLACK, UGDS_HISP, UGDS_ASIAN, UGDS_AIAN, UGDS_NHPI, UGDS_2MOR, UGDS_NRA, UGDS_UNKN, UGDS_WHITENH,
UGDS_BLACKNH, UGDS_API, UGDS_AIANOLD, UGDS_HISPOLD, UG_NRA, UG_UNKN, UG_WHITENH, UG_BLACKNH, UG_API, UG_AIANOLD, UG_HISPOLD,
PPTUG_EF, PPTUG_EF2, CURROPER, NPT4_048_PUB, NPT4_3075_PUB, NPT4_75UP_PUB)
merge_1 <- merge(x_variables, y_variables, by = "INSTNM")
clean_data <- merge(merge_1, race_and_income, by = "INSTNM")
#checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
=======
View(clean_data[,101:ncol(clean_data)])
library(leaps)
library(glmnet)
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3/code/scripts")
#clean_data=read.csv("../../data/clean_data.csv")[,-1]
choosing_response=function(dataframe, character){
response=which(colnames(dataframe)==character)
dataframe[,setdiff(95:101, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
dataframe= subset(dataframe, select=c(setdiff(1:ncol(dataframe),response), response))
return(dataframe)
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
}
#Converting types of variables that don't make any sense (and getting rid of some variables)
clean_data$PREDDEG=as.factor(clean_data$PREDDEG) #PREDDEG tells us the predominant type of degree given in a univ
clean_data$CITY=NULL  #Don't need city variable in my opinion
clean_data$ZIP=NULL #Don't need zip code variable in my opinion
clean_data$ST_FIPS= as.factor(clean_data$ST_FIPS) #State should not be an integer variable
clean_data$ST_FIPS=NULL #Don't need state variable when we have a region variable
clean_data$REGION= as.factor(clean_data$REGION) #Region should not be an integer variable
clean_data$LOCALE2=NULL #Too many NULL values here
clean_data$ADM_RATE=as.numeric(clean_data$ADM_RATE) #Admission rates shouldn't be a factor
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #Converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,114:133,135,145:156,158)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #Converting all these factors into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
clean_data[,7:85]=apply(clean_data[,7:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,120:139,141,151:162,164)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #converting all these factors  into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
#getting rid of 4 more useless variables
clean_data$INSTNM=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL # all values are 3, so useless variable
clean_data[,3:7]=apply(clean_data[,3:7] , 2, as.numeric)
View(clean_data)
for(i in 1:ncol(clean_data)){
clean_data[is.na(clean_data[,i]),i]=mean(clean_data[,i], na.rm=TRUE)
}
<<<<<<< HEAD
View(clean_data)
#----------------------------------------------------------------------
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3/code/scripts")
#data=read.csv("../../data/MERGED2014_15_PP.csv")
#clean_data=read.csv("../../data/clean_data.csv")
library(dplyr)
#read data set
args <- commandArgs(trailingOnly=TRUE)
data <- read.csv(args[1])
#data cleaning
selected_data <- data %>%
filter(PREDDEG == 3) %>% #Degree awarded predominantly bachelor
filter(MAIN == 1) %>% #Main campus
filter(CONTROL == 1) #Public schools
#variables we are going to use
x_variables <- selected_data %>%
dplyr::select(UNITID, PREDDEG, MAIN, CONTROL, INSTNM, CITY, ZIP, ST_FIPS, REGION, LOCALE2, ADM_RATE, SATVR25, SATVR75, SATMT25, SATMT75, SATWR25,
SATWR75, SATVRMID, SATMTMID, SATWRMID, ACTCM25, ACTCM75, ACTEN25, ACTEN75, ACTMT25, ACTMT75, ACTWR25, ACTWR75, ACTCMMID,
ACTENMID, ACTMTMID, ACTWRMID, SAT_AVG, PCIP01, PCIP03, PCIP04, PCIP05, PCIP09, PCIP10, PCIP11, PCIP12, PCIP13,
PCIP14, PCIP15, PCIP16, PCIP19, PCIP22, PCIP23, PCIP24, PCIP25, PCIP26, PCIP27, PCIP29, PCIP30, PCIP31, PCIP38, PCIP39,
PCIP40, PCIP41, PCIP42, PCIP43, PCIP44, PCIP45, PCIP46, PCIP47, PCIP48, PCIP49, PCIP50, PCIP51, PCIP52, PCIP54, NPT4_PUB,
NPT41_PUB, NPT42_PUB, NPT43_PUB, NPT44_PUB, NPT45_PUB, NUM4_PUB, NUM41_PUB, NUM42_PUB, NUM43_PUB, NUM44_PUB, NUM45_PUB,
COSTT4_A, TUITIONFEE_IN, TUITIONFEE_OUT, AVGFACSAL, PFTFAC, OVERALL_YR4_N, LO_INC_YR4_N, MD_INC_YR4_N, HI_INC_YR4_N, DEP_YR4_N,
IND_YR4_N, FEMALE_YR4_N, MALE_YR4_N, FIRSTGEN_YR4_N, NOT1STGEN_YR4_N, OVERALL_YR6_N, LO_INC_YR6_N, MD_INC_YR6_N, HI_INC_YR6_N,
DEP_YR6_N, IND_YR6_N, FEMALE_YR6_N, MALE_YR6_N, FIRSTGEN_YR6_N, NOT1STGEN_YR6_N, AGE_ENTRY, AGEGE24, FEMALE, MARRIED, DEPENDENT,
VETERAN, FIRST_GEN)
y_variables <- selected_data %>%
dplyr::select(INSTNM, C150_4, C150_4_HISP,C150_4_AIAN, C150_4_WHITE, C150_4_BLACK,C150_4_ASIAN, C150_4_NHPI, COMP_ORIG_YR6_RT, COMP_4YR_TRANS_YR6_RT, LO_INC_COMP_ORIG_YR6_RT, LO_INC_COMP_4YR_TRANS_YR6_RT, MD_INC_COMP_ORIG_YR6_RT,
MD_INC_COMP_4YR_TRANS_YR6_RT, HI_INC_COMP_ORIG_YR6_RT, HI_INC_COMP_4YR_TRANS_YR6_RT, DEP_COMP_ORIG_YR6_RT, DEP_COMP_4YR_TRANS_YR6_RT,
IND_COMP_ORIG_YR6_RT, IND_COMP_4YR_TRANS_YR6_RT, FEMALE_COMP_ORIG_YR6_RT, FEMALE_COMP_4YR_TRANS_YR6_RT, MALE_COMP_ORIG_YR6_RT,
MALE_COMP_4YR_TRANS_YR6_RT, FIRSTGEN_COMP_ORIG_YR6_RT, FIRSTGEN_COMP_4YR_TRANS_YR6_RT, NOT1STGEN_COMP_ORIG_YR6_RT,
NOT1STGEN_COMP_4YR_TRANS_YR6_RT)
race_and_income <- selected_data %>%
dplyr::select(INSTNM, UGDS, UG, UGDS_WHITE, UGDS_BLACK, UGDS_HISP, UGDS_ASIAN, UGDS_AIAN, UGDS_NHPI, UGDS_2MOR, UGDS_NRA, UGDS_UNKN, UGDS_WHITENH,
UGDS_BLACKNH, UGDS_API, UGDS_AIANOLD, UGDS_HISPOLD, UG_NRA, UG_UNKN, UG_WHITENH, UG_BLACKNH, UG_API, UG_AIANOLD, UG_HISPOLD,
PPTUG_EF, PPTUG_EF2, CURROPER, NPT4_048_PUB, NPT4_3075_PUB, NPT4_75UP_PUB)
merge_1 <- merge(x_variables, y_variables, by = "INSTNM")
clean_data <- merge(merge_1, race_and_income, by = "INSTNM")
#checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
}
#Converting types of variables that don't make any sense (and getting rid of some variables)
clean_data$PREDDEG=as.factor(clean_data$PREDDEG) #PREDDEG tells us the predominant type of degree given in a univ
clean_data$CITY=NULL  #Don't need city variable in my opinion
clean_data$ZIP=NULL #Don't need zip code variable in my opinion
clean_data$ST_FIPS= as.factor(clean_data$ST_FIPS) #State should not be an integer variable
clean_data$ST_FIPS=NULL #Don't need state variable when we have a region variable
clean_data$REGION= as.factor(clean_data$REGION) #Region should not be an integer variable
clean_data$LOCALE2=NULL #Too many NULL values here
clean_data$ADM_RATE=as.numeric(clean_data$ADM_RATE) #Admission rates shouldn't be a factor
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #Converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,114:133,135,145:156,158)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #Converting all these factors into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
clean_data[,7:85]=apply(clean_data[,7:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,120:139,141,151:162,164)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #converting all these factors  into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
#getting rid of 4 more useless variables
clean_data$INSTNM=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL # all values are 3, so useless variable
clean_data[,3:7]=apply(clean_data[,3:7] , 2, as.numeric)
View(clean_data)
for(i in 1:ncol(clean_data)){
clean_data[is.na(clean_data[,i]),i]=mean(clean_data[,i], na.rm=TRUE)
}
View(clean_data)
clean_data_1 <- read.csv('../../data/clean_data.csv', row.names = 1)
#dealing with NA values... lets replace each NA value with the column average
for(i in 1:ncol(clean_data_1)){
clean_data_1[is.na(clean_data_1[,i]),i]=mean(clean_data_1[,i], na.rm=TRUE)
}
#converting categorical columns into multiple binary columns
clean_data_1=model.matrix(~., clean_data_1)
clean_data_1=as.data.frame(clean_data_1)[,-1]
#scaling non-categorical variables
for (i in c(10:ncol(clean_data_1))){
clean_data_1[,i]=scale(clean_data_1[,i])
}
#clean race and income and y and x variables
write.csv(clean_data_1, file = '../../data/clean_data_1.csv')
write.csv(race_and_income, file='../../data/race_and_income.csv')
write.csv(y_variables, file='../../data/y_variables.csv')
write.csv(x_variables, file='../../data/x_variables.csv')
#----------------------------------------------------------------------
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3/code/scripts")
#data=read.csv("../../data/MERGED2014_15_PP.csv")
#clean_data=read.csv("../../data/clean_data.csv")
library(dplyr)
#read data set
args <- commandArgs(trailingOnly=TRUE)
data <- read.csv(args[1])
#data cleaning
selected_data <- data %>%
filter(PREDDEG == 3) %>% #Degree awarded predominantly bachelor
filter(MAIN == 1) %>% #Main campus
filter(CONTROL == 1) #Public schools
#variables we are going to use
x_variables <- selected_data %>%
dplyr::select(UNITID, PREDDEG, MAIN, CONTROL, INSTNM, CITY, ZIP, ST_FIPS, REGION, LOCALE2, ADM_RATE, SATVR25, SATVR75, SATMT25, SATMT75, SATWR25,
SATWR75, SATVRMID, SATMTMID, SATWRMID, ACTCM25, ACTCM75, ACTEN25, ACTEN75, ACTMT25, ACTMT75, ACTWR25, ACTWR75, ACTCMMID,
ACTENMID, ACTMTMID, ACTWRMID, SAT_AVG, PCIP01, PCIP03, PCIP04, PCIP05, PCIP09, PCIP10, PCIP11, PCIP12, PCIP13,
PCIP14, PCIP15, PCIP16, PCIP19, PCIP22, PCIP23, PCIP24, PCIP25, PCIP26, PCIP27, PCIP29, PCIP30, PCIP31, PCIP38, PCIP39,
PCIP40, PCIP41, PCIP42, PCIP43, PCIP44, PCIP45, PCIP46, PCIP47, PCIP48, PCIP49, PCIP50, PCIP51, PCIP52, PCIP54, NPT4_PUB,
NPT41_PUB, NPT42_PUB, NPT43_PUB, NPT44_PUB, NPT45_PUB, NUM4_PUB, NUM41_PUB, NUM42_PUB, NUM43_PUB, NUM44_PUB, NUM45_PUB,
COSTT4_A, TUITIONFEE_IN, TUITIONFEE_OUT, AVGFACSAL, PFTFAC, OVERALL_YR4_N, LO_INC_YR4_N, MD_INC_YR4_N, HI_INC_YR4_N, DEP_YR4_N,
IND_YR4_N, FEMALE_YR4_N, MALE_YR4_N, FIRSTGEN_YR4_N, NOT1STGEN_YR4_N, OVERALL_YR6_N, LO_INC_YR6_N, MD_INC_YR6_N, HI_INC_YR6_N,
DEP_YR6_N, IND_YR6_N, FEMALE_YR6_N, MALE_YR6_N, FIRSTGEN_YR6_N, NOT1STGEN_YR6_N, AGE_ENTRY, AGEGE24, FEMALE, MARRIED, DEPENDENT,
VETERAN, FIRST_GEN)
y_variables <- selected_data %>%
dplyr::select(INSTNM, C150_4, C150_4_HISP,C150_4_AIAN, C150_4_WHITE, C150_4_BLACK,C150_4_ASIAN, C150_4_NHPI, COMP_ORIG_YR6_RT, COMP_4YR_TRANS_YR6_RT, LO_INC_COMP_ORIG_YR6_RT, LO_INC_COMP_4YR_TRANS_YR6_RT, MD_INC_COMP_ORIG_YR6_RT,
MD_INC_COMP_4YR_TRANS_YR6_RT, HI_INC_COMP_ORIG_YR6_RT, HI_INC_COMP_4YR_TRANS_YR6_RT, DEP_COMP_ORIG_YR6_RT, DEP_COMP_4YR_TRANS_YR6_RT,
IND_COMP_ORIG_YR6_RT, IND_COMP_4YR_TRANS_YR6_RT, FEMALE_COMP_ORIG_YR6_RT, FEMALE_COMP_4YR_TRANS_YR6_RT, MALE_COMP_ORIG_YR6_RT,
MALE_COMP_4YR_TRANS_YR6_RT, FIRSTGEN_COMP_ORIG_YR6_RT, FIRSTGEN_COMP_4YR_TRANS_YR6_RT, NOT1STGEN_COMP_ORIG_YR6_RT,
NOT1STGEN_COMP_4YR_TRANS_YR6_RT)
race_and_income <- selected_data %>%
dplyr::select(INSTNM, UGDS, UG, UGDS_WHITE, UGDS_BLACK, UGDS_HISP, UGDS_ASIAN, UGDS_AIAN, UGDS_NHPI, UGDS_2MOR, UGDS_NRA, UGDS_UNKN, UGDS_WHITENH,
UGDS_BLACKNH, UGDS_API, UGDS_AIANOLD, UGDS_HISPOLD, UG_NRA, UG_UNKN, UG_WHITENH, UG_BLACKNH, UG_API, UG_AIANOLD, UG_HISPOLD,
PPTUG_EF, PPTUG_EF2, CURROPER, NPT4_048_PUB, NPT4_3075_PUB, NPT4_75UP_PUB)
merge_1 <- merge(x_variables, y_variables, by = "INSTNM")
clean_data <- merge(merge_1, race_and_income, by = "INSTNM")
#checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
}
#Converting types of variables that don't make any sense (and getting rid of some variables)
clean_data$PREDDEG=as.factor(clean_data$PREDDEG) #PREDDEG tells us the predominant type of degree given in a univ
clean_data$CITY=NULL  #Don't need city variable in my opinion
clean_data$ZIP=NULL #Don't need zip code variable in my opinion
clean_data$ST_FIPS= as.factor(clean_data$ST_FIPS) #State should not be an integer variable
clean_data$ST_FIPS=NULL #Don't need state variable when we have a region variable
clean_data$REGION= as.factor(clean_data$REGION) #Region should not be an integer variable
clean_data$LOCALE2=NULL #Too many NULL values here
clean_data$ADM_RATE=as.numeric(clean_data$ADM_RATE) #Admission rates shouldn't be a factor
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #Converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,114:133,135,145:156,158)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #Converting all these factors into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
clean_data[,7:85]=apply(clean_data[,7:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,120:139,141,151:162,164)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #converting all these factors  into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
#getting rid of 4 more useless variables
clean_data$INSTNM=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL # all values are 3, so useless variable
clean_data[,3:7]=apply(clean_data[,3:7] , 2, as.numeric)
#save it in a csv
write.csv(clean_data, file = '../../data/clean_data.csv')
View(clean_data)
#----------------------------------------------------------------------
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3/code/scripts")
#data=read.csv("../../data/MERGED2014_15_PP.csv")
#clean_data=read.csv("../../data/clean_data.csv")
library(dplyr)
#read data set
args <- commandArgs(trailingOnly=TRUE)
data <- read.csv(args[1])
#data cleaning
selected_data <- data %>%
filter(PREDDEG == 3) %>% #Degree awarded predominantly bachelor
filter(MAIN == 1) %>% #Main campus
filter(CONTROL == 1) #Public schools
#variables we are going to use
x_variables <- selected_data %>%
dplyr::select(UNITID, PREDDEG, MAIN, CONTROL, INSTNM, CITY, ZIP, ST_FIPS, REGION, LOCALE2, ADM_RATE, SATVR25, SATVR75, SATMT25, SATMT75, SATWR25,
SATWR75, SATVRMID, SATMTMID, SATWRMID, ACTCM25, ACTCM75, ACTEN25, ACTEN75, ACTMT25, ACTMT75, ACTWR25, ACTWR75, ACTCMMID,
ACTENMID, ACTMTMID, ACTWRMID, SAT_AVG, PCIP01, PCIP03, PCIP04, PCIP05, PCIP09, PCIP10, PCIP11, PCIP12, PCIP13,
PCIP14, PCIP15, PCIP16, PCIP19, PCIP22, PCIP23, PCIP24, PCIP25, PCIP26, PCIP27, PCIP29, PCIP30, PCIP31, PCIP38, PCIP39,
PCIP40, PCIP41, PCIP42, PCIP43, PCIP44, PCIP45, PCIP46, PCIP47, PCIP48, PCIP49, PCIP50, PCIP51, PCIP52, PCIP54, NPT4_PUB,
NPT41_PUB, NPT42_PUB, NPT43_PUB, NPT44_PUB, NPT45_PUB, NUM4_PUB, NUM41_PUB, NUM42_PUB, NUM43_PUB, NUM44_PUB, NUM45_PUB,
COSTT4_A, TUITIONFEE_IN, TUITIONFEE_OUT, AVGFACSAL, PFTFAC, OVERALL_YR4_N, LO_INC_YR4_N, MD_INC_YR4_N, HI_INC_YR4_N, DEP_YR4_N,
IND_YR4_N, FEMALE_YR4_N, MALE_YR4_N, FIRSTGEN_YR4_N, NOT1STGEN_YR4_N, OVERALL_YR6_N, LO_INC_YR6_N, MD_INC_YR6_N, HI_INC_YR6_N,
DEP_YR6_N, IND_YR6_N, FEMALE_YR6_N, MALE_YR6_N, FIRSTGEN_YR6_N, NOT1STGEN_YR6_N, AGE_ENTRY, AGEGE24, FEMALE, MARRIED, DEPENDENT,
VETERAN, FIRST_GEN)
y_variables <- selected_data %>%
dplyr::select(INSTNM, C150_4, C150_4_HISP,C150_4_AIAN, C150_4_WHITE, C150_4_BLACK,C150_4_ASIAN, C150_4_NHPI, COMP_ORIG_YR6_RT, COMP_4YR_TRANS_YR6_RT, LO_INC_COMP_ORIG_YR6_RT, LO_INC_COMP_4YR_TRANS_YR6_RT, MD_INC_COMP_ORIG_YR6_RT,
MD_INC_COMP_4YR_TRANS_YR6_RT, HI_INC_COMP_ORIG_YR6_RT, HI_INC_COMP_4YR_TRANS_YR6_RT, DEP_COMP_ORIG_YR6_RT, DEP_COMP_4YR_TRANS_YR6_RT,
IND_COMP_ORIG_YR6_RT, IND_COMP_4YR_TRANS_YR6_RT, FEMALE_COMP_ORIG_YR6_RT, FEMALE_COMP_4YR_TRANS_YR6_RT, MALE_COMP_ORIG_YR6_RT,
MALE_COMP_4YR_TRANS_YR6_RT, FIRSTGEN_COMP_ORIG_YR6_RT, FIRSTGEN_COMP_4YR_TRANS_YR6_RT, NOT1STGEN_COMP_ORIG_YR6_RT,
NOT1STGEN_COMP_4YR_TRANS_YR6_RT)
race_and_income <- selected_data %>%
dplyr::select(INSTNM, UGDS, UG, UGDS_WHITE, UGDS_BLACK, UGDS_HISP, UGDS_ASIAN, UGDS_AIAN, UGDS_NHPI, UGDS_2MOR, UGDS_NRA, UGDS_UNKN, UGDS_WHITENH,
UGDS_BLACKNH, UGDS_API, UGDS_AIANOLD, UGDS_HISPOLD, UG_NRA, UG_UNKN, UG_WHITENH, UG_BLACKNH, UG_API, UG_AIANOLD, UG_HISPOLD,
PPTUG_EF, PPTUG_EF2, CURROPER, NPT4_048_PUB, NPT4_3075_PUB, NPT4_75UP_PUB)
merge_1 <- merge(x_variables, y_variables, by = "INSTNM")
clean_data <- merge(merge_1, race_and_income, by = "INSTNM")
#checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
}
#Converting types of variables that don't make any sense (and getting rid of some variables)
clean_data$PREDDEG=as.factor(clean_data$PREDDEG) #PREDDEG tells us the predominant type of degree given in a univ
clean_data$CITY=NULL  #Don't need city variable in my opinion
clean_data$ZIP=NULL #Don't need zip code variable in my opinion
clean_data$ST_FIPS= as.factor(clean_data$ST_FIPS) #State should not be an integer variable
clean_data$ST_FIPS=NULL #Don't need state variable when we have a region variable
clean_data$REGION= as.factor(clean_data$REGION) #Region should not be an integer variable
clean_data$LOCALE2=NULL #Too many NULL values here
clean_data$ADM_RATE=as.numeric(clean_data$ADM_RATE) #Admission rates shouldn't be a factor
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #Converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,114:133,135,145:156,158)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #Converting all these factors into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
clean_data[,7:85]=apply(clean_data[,7:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,120:139,141,151:162,164)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #converting all these factors  into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
#getting rid of 4 more useless variables
clean_data$INSTNM=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL # all values are 3, so useless variable
clean_data[,3:7]=apply(clean_data[,3:7] , 2, as.numeric)
#save it in a csv
write.csv(clean_data, file = '../../data/clean_data.csv')
clean_data_1 <- read.csv('../../data/clean_data.csv', row.names = 1)
#dealing with NA values... lets replace each NA value with the column average
for(i in 1:ncol(clean_data_1)){
clean_data_1[is.na(clean_data_1[,i]),i]=mean(clean_data_1[,i], na.rm=TRUE)
}
#converting categorical columns into multiple binary columns
clean_data_1=model.matrix(~., clean_data_1)
clean_data_1=as.data.frame(clean_data_1)[,-1]
#scaling non-categorical variables
for (i in c(10:ncol(clean_data_1))){
clean_data_1[,i]=scale(clean_data_1[,i])
}
#clean race and income and y and x variables
write.csv(clean_data_1, file = '../../data/clean_data_1.csv')
write.csv(race_and_income, file='../../data/race_and_income.csv')
write.csv(y_variables, file='../../data/y_variables.csv')
write.csv(x_variables, file='../../data/x_variables.csv')
require(dplyr)
library(ggplot2)
#Read data sets
clean_data <- read.csv('../../data/clean_data.csv')
data <- read.csv('../../data/MERGED2014_15_PP.csv')
#Quantitative variables
quantitative <- clean_data %>%
select(PREDDEG, REGION, ADM_RATE, SATVR25, SATVR75, SATMT25, SATMT75, SATWR25, SATWR75,
SATVRMID, SATMTMID, SATWRMID, ACTCM25, ACTCM75, ACTEN25, ACTEN75, ACTMT25, ACTMT75,
ACTWR25, ACTWR75, ACTCMMID, ACTENMID, ACTMTMID, ACTWRMID, SAT_AVG, PCIP01, PCIP03,
PCIP04, PCIP05, PCIP09, PCIP10, PCIP11, PCIP12, PCIP13, PCIP14, PCIP15, PCIP16,
PCIP19, PCIP22, PCIP23, PCIP24, PCIP25, PCIP26, PCIP27, PCIP29, PCIP30, PCIP31,
PCIP38, PCIP39, PCIP40, PCIP41, PCIP42, PCIP43, PCIP44, PCIP45, PCIP46, PCIP47,
PCIP48, PCIP49, PCIP50, PCIP51, PCIP52, PCIP54, NPT4_PUB, NPT41_PUB, NPT42_PUB,
NPT43_PUB, NPT44_PUB, NPT45_PUB, NUM4_PUB, NUM41_PUB, NUM42_PUB, NUM43_PUB,
NUM44_PUB, NUM45_PUB, COSTT4_A, TUITIONFEE_IN, TUITIONFEE_OUT, AVGFACSAL, PFTFAC,
AGE_ENTRY, FEMALE, MARRIED, DEPENDENT, VETERAN, FIRST_GEN, C150_4, UGDS, UGDS_WHITE,
UGDS_BLACK, UGDS_HISP, UGDS_ASIAN, UGDS_AIAN, UGDS_NHPI, UGDS_2MOR, UGDS_NRA, UGDS_UNKN,
PPTUG_EF, NPT4_048_PUB, NPT4_3075_PUB, NPT4_75UP_PUB)
require(dplyr)
library(ggplot2)
#Read data sets
clean_data <- read.csv('../../data/clean_data.csv')
data <- read.csv('../../data/MERGED2014_15_PP.csv')
View(clean_data)
=======
bic_select=function(dataframe, character){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(lm_obj$coefficients)
return(bic_var)
}
ui <- fluidPage(
actionButton("click", label="Generate Relevant Variables"), #Creating an action button
textInput("text", label = h3("Text input"), value = "Lasso, BIC, P-Value"), #Creating an input widget
radioButtons("Select Graduation Rate of Interest", label = h3("Radio buttons"),
choices = list("Overall Graduation Rate" = "UGDS", "Graduation Rates of White People" = "UGDS_WHITE", "Graduation Rates of Black People" = "UGDS_BLACK",
"Graduation Rates of Hispanic People"="UGDS_HISP", "Graduation Rates of Asian People"="UGDS_ASIAN", "Graduation Rates of Native Americans"="UGDS_AIAN",
"Graduation Rates of Pacific Islanders"="UGDS_NHPI", ="UGDS_2MOR", ="UGDS_NRA", ="UGDS_UNKN"),
selected = 1),
numericInput("var_num", label=h3("Number of Variables"), value=1:10),
tableOutput("variables")
)
library(shiny)
ui <- fluidPage(
actionButton("click", label="Generate Relevant Variables"), #Creating an action button
textInput("text", label = h3("Text input"), value = "Lasso, BIC, P-Value"), #Creating an input widget
radioButtons("Select Graduation Rate of Interest", label = h3("Radio buttons"),
choices = list("Overall Graduation Rate" = "UGDS", "Graduation Rates of White People" = "UGDS_WHITE", "Graduation Rates of Black People" = "UGDS_BLACK",
"Graduation Rates of Hispanic People"="UGDS_HISP", "Graduation Rates of Asian People"="UGDS_ASIAN", "Graduation Rates of Native Americans"="UGDS_AIAN",
"Graduation Rates of Pacific Islanders"="UGDS_NHPI", ="UGDS_2MOR", ="UGDS_NRA", ="UGDS_UNKN"),
selected = 1),
numericInput("var_num", label=h3("Number of Variables"), value=1:10),
tableOutput("variables")
)
clean_data=read.csv("../../data/clean_data.csv")[-1]
View(clean_data)
View(clean_data[,101:ncol(clean_data)])
ui <- fluidPage(
actionButton("click", label="Generate Relevant Variables"), #Creating an action button
textInput("text", label = h3("Text input"), value = "Lasso, BIC, P-Value"), #Creating an input widget
radioButtons("Select Graduation Rate of Interest", label = h3("Radio buttons"),
choices = list("Overall Graduation Rate" = "C150_4", "Graduation Rates of White People" = "C150_4_WHITE", "Graduation Rates of Black People" = "C150_4_Black",
"Graduation Rates of Hispanic People"="C150_4_HISP", "Graduation Rates of Asian People"="C150_4_ASIAN", "Graduation Rates of Native Americans"="C150_4_AIAN",
"Graduation Rates of Pacific Islanders"="C150_4_NHPI"),
selected = 1),
numericInput("var_num", label=h3("Number of Variables"), value=1:10),
tableOutput("variables")
)
shinyApp(ui = ui, server = server)
server <- function(input, output){
observeEvent(input$click,{
order_ind=order(table(rel_data2$obfs_bkuuid), decreasing=TRUE) #ordering unique user ids by counts of repeats in decreasing order
ids=names(table(rel_data2$obfs_bkuuid)[order_ind]) #reordering ids by above indices
index=sample(1:length(ids),1) #getting a random user
output$variables=renderTable({repeatuser_mods2(ids[index],input$text)}) #plotting a random user with a specified time scale
})
}
shinyApp(ui = ui, server = server)
source("functions.R")
choosing_response(clean_data, "C150_4_HISP")
sample=choosing_response(clean_data, "C150_4_HISP")
lasso_select(sample, "C150_4_HISP")
lasso_select=function(dataframe, character){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=data.frame(row.names(coef(sparse_vector))[relevant], coef(sparse_vector)[relevant]) #Printing out the names of our relevant variables!
colnames(lasso_var)=c("Relevant Variables", "Beta Coefficients")
return(lasso_var)
}
sample=choosing_response(clean_data, "C150_4_HISP")
lasso_select(sample, "C150_4_HISP")
bic_select=function(dataframe, character){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(lm_obj$coefficients)
return(bic_var)
}
bic_select(sample, "C150_4_HISP")
bic_select=function(dataframe, character){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(rownames(lm_obj$coefficients),lm_obj$coefficients)
colnames(bic_var)=c("Relevant Variables","Beta Coefficients")
return(bic_var)
}
bic_select(sample, "C150_4_HISP")
bic_select=function(dataframe, character){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(rownames(data.frame(lm_obj$coefficients)),lm_obj$coefficients)
colnames(bic_var)=c("Relevant Variables","Beta Coefficients")
return(bic_var)
}
bic_select(sample, "C150_4_HISP")
bic_select=function(dataframe, character){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(rownames(data.frame(lm_obj$coefficients)),lm_obj$coefficients)
rownames(bic_var)=NULL
colnames(bic_var)=c("Relevant Variables","Beta Coefficients")
return(bic_var)
}
bic_select(sample, "C150_4_HISP")
lasso_select=function(dataframe, character, n){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=data.frame(row.names(coef(sparse_vector))[relevant], coef(sparse_vector)[relevant]) #Printing out the names of our relevant variables!
colnames(lasso_var)=c("Relevant Variables", "Beta Coefficients")
return(lasso_var[1:n,])
}
bic_select=function(dataframe, character, n){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(rownames(data.frame(lm_obj$coefficients)),lm_obj$coefficients)
rownames(bic_var)=NULL
colnames(bic_var)=c("Relevant Variables","Beta Coefficients")
return(bic_var[1:n,])
}
bic_select(sample, "C150_4_HISP", 5)
lasso_select(sample, "C150_4_HISP", 5)
lasso_select=function(dataframe, character, n){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=data.frame(row.names(coef(sparse_vector))[relevant], coef(sparse_vector)[relevant]) #Printing out the names of our relevant variables!
colnames(lasso_var)=c("Relevant Variables", "Beta Coefficients")
return(lasso_var)
}
bic_select=function(dataframe, character, n){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(rownames(data.frame(lm_obj$coefficients)),lm_obj$coefficients)
rownames(bic_var)=NULL
colnames(bic_var)=c("Relevant Variables","Beta Coefficients")
return(bic_var)
}
sample(1:5)
x=sample(1:5)
order(x, decreasing=TRUE)
choosing_response=function(dataframe, character){
response=which(colnames(dataframe)==character)
dataframe[,setdiff(95:101, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
dataframe= subset(dataframe, select=c(setdiff(1:ncol(dataframe),response), response))
return(dataframe)
}
lasso_select=function(dataframe, character, n){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=data.frame(row.names(coef(sparse_vector))[relevant], coef(sparse_vector)[relevant]) #Printing out the names of our relevant variables!
colnames(lasso_var)=c("Relevant_Variables", "Beta_Coefficients")
ordered=order(abs(lasso_var$Beta_Coefficients), decreasing=TRUE)
lasso_var=lasso_var[ordered,]
return(lasso_var[1:n,])
}
bic_select=function(dataframe, character, n){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(rownames(data.frame(lm_obj$coefficients)),lm_obj$coefficients)
rownames(bic_var)=NULL
colnames(bic_var)=c("Relevant_Variables","Beta_Coefficients")
ordered=order(abs(bic_var$Beta_Coefficients), decreasing=TRUE)
bic_var=bic_var[ordered,]
return(bic_var[1:n,])
}
bic_select(sample, "C150_4_HISP",5)
lasso_select(sample, "C150_4_HISP",5)
lasso_select(sample, "C150_4_HISP",10)
lasso_select(sample, "C150_4_HISP",12)
lasso_select(sample, "C150_4_HISP",15)
lasso_select(sample, "C150_4_HISP",20)
lasso_select=function(dataframe, character, n){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=data.frame(row.names(coef(sparse_vector))[relevant], coef(sparse_vector)[relevant]) #Printing out the names of our relevant variables!
colnames(lasso_var)=c("Relevant_Variables", "Beta_Coefficients")
ordered=order(abs(lasso_var$Beta_Coefficients), decreasing=TRUE)
lasso_var=lasso_var[ordered,]
lasso_var=lasso_var[1:n,]
lasso_var=lasso_var[-is.na(lasso_var$Beta_Coefficients),]
return(lasso_var)
}
bic_select=function(dataframe, character, n){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(rownames(data.frame(lm_obj$coefficients)),lm_obj$coefficients)
rownames(bic_var)=NULL
colnames(bic_var)=c("Relevant_Variables","Beta_Coefficients")
ordered=order(abs(bic_var$Beta_Coefficients), decreasing=TRUE)
bic_var=bic_var[ordered,]
bic_var=bic_var[1:n,]
bic_var=bic_var[-is.na(bic_var$Beta_Coefficients),]
return(bic_var)
}
lasso_select(sample, "C150_4_HISP", 5)
sample
lasso_select(sample, "C150_4_HISP",15)
lasso_select(sample, "C150_4_HISP",20)
lasso_select=function(dataframe, character, n){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=data.frame(row.names(coef(sparse_vector))[relevant], coef(sparse_vector)[relevant]) #Printing out the names of our relevant variables!
colnames(lasso_var)=c("Relevant_Variables", "Beta_Coefficients")
ordered=order(abs(lasso_var$Beta_Coefficients), decreasing=TRUE)
lasso_var=lasso_var[ordered,]
lasso_var=lasso_var[1:n,]
lasso_var=lasso_var[-is.na(lasso_var$Beta_Coefficients),]
return(lasso_var)
}
bic_select=function(dataframe, character, n){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(rownames(data.frame(lm_obj$coefficients)),lm_obj$coefficients)
rownames(bic_var)=NULL
colnames(bic_var)=c("Relevant_Variables","Beta_Coefficients")
ordered=order(abs(bic_var$Beta_Coefficients), decreasing=TRUE)
bic_var=bic_var[ordered,]
bic_var=bic_var[1:n,]
bic_var=bic_var[-is.na(bic_var$Beta_Coefficients),]
return(bic_var)
}
lasso_select(sample, "C150_4_HISP",20)
bic_select(sample, "C150_4_HISP",20)
lasso_select=function(dataframe, character, n){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=data.frame(row.names(coef(sparse_vector))[relevant], coef(sparse_vector)[relevant]) #Printing out the names of our relevant variables!
colnames(lasso_var)=c("Relevant_Variables", "Beta_Coefficients")
ordered=order(abs(lasso_var$Beta_Coefficients), decreasing=TRUE)
lasso_var=lasso_var[ordered,]
return(lasso_var[1:n,])
}
bic_select=function(dataframe, character, n){
model=summary(regsubsets(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
lm_obj=lm.fit(as.matrix(dataframe[, relevant-1]), dataframe[,which(colnames(dataframe)==character)])
bic_var=data.frame(rownames(data.frame(lm_obj$coefficients)),lm_obj$coefficients)
rownames(bic_var)=NULL
colnames(bic_var)=c("Relevant_Variables","Beta_Coefficients")
ordered=order(abs(bic_var$Beta_Coefficients), decreasing=TRUE)
bic_var=bic_var[ordered,]
return(bic_var[1:n,])
}
lasso_select(sample, "C150_4_HISP",20)
lasso_select(sample, "C150_4_HISP",5)
bic_select(sample, "C150_4_HISP",5)
?substr()
substr("aldksjflakjsdfk;sa", start=1, stop=6)
#setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3/code/scripts")
=======
adjr2_mse=cv_mse(data, c("season3","season4", "weathersit2", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #628819.72
adjr2_mse
model$which
model=summary(regsubsets(log(cnt+1)~.,data=data[-outlier_reg,], nvmax=16))
#Adjusted R-Squared
which.max(model$adjr2) #Tells us to use 9 variables
#AIC
which.min(model$bic-((ncol(data)+1)*log(nrow(data))) + (2*(ncol(data)+1))) #6 variables
#BIC
which.min(model$bic) #6 variables
#Mallow's CP
which.min(model$cp) #9 variables
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(log(cnt+1)~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=exp(as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ])))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #28817.16
adjr2_mse=cv_mse(data, c("season3","season4", "weathersit2","weathersit3","weathersit4", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #28819.72
adjr2_mse=cv_mse(data, c("season2", "season3","season4", "weathersit2","weathersit3", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #28819.72
adjr2_mse
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(cnt~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ]))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #23682.54
adjr2_mse=cv_mse(data, c("season3","season4", "weathersit2", "atemp", "weathersit4", "hum", "windspeed", "cnt")) #23680.92
adjr2_mse
model1=summary(regsubsets(cnt~.,data=data[-outlier_reg,], nvmax=16))
#Adjusted R-Squared
which.max(model1$adjr2) #Tells us to use 7 variables
#AIC
which.min(model1$bic-((ncol(data)+1)*log(nrow(data))) + (2*(ncol(data)+1))) #6 variables
#BIC
which.min(model1$bic) #6 variables
#Mallow's CP
which.min(model1$cp) #6 variables
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #23682.54
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(log(cnt+1)~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=exp(as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ])))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #28817.16
adjr2_mse=cv_mse(data, c("season2", "season3","season4", "weathersit2","weathersit3", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #28973.29
aic_mse
#Creating table to use in report
mse=c(23680.92,28817.16)
df=data.frame(c(mse[1],model1$which[7,-1]), c(mse[2],model$which[6,-1]))
colnames(df)=c("Untransformed Regression", "Transformed Regression")
rownames(df)[1]=c("Mean Squared Error")
save(df, file="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/df.RData")
#Creating a binary weekend variable
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/BikeSharingDataset.csv")
end=which(data$weekday==0| data$weekday==6)
day=which(data$weekday!=0 & data$weekday!=6)
data$day_of_week=data$weekday
data$weekday=NULL
data$weekend=rep(0, nrow(data))
data$weekend[end]=1
data$weekend[day]=0
#converting numerical categories to factors
data=data[,-c(1,2,10,16)]
data$weathersit=as.factor(data$weathersit)
data$day_of_week=as.factor(data$day_of_week)
data$season=as.factor(data$season)
data$mnth=as.factor(data$mnth)
data$hr=as.factor(data$hr)
data=model.matrix(~., data=data) #converting season to multiple binary variables
data=as.data.frame(data[-1,])
#Removing outliers for registered
library(MASS)
registered= lm(registered~.,data=data[,-48])
leverages=hatvalues(registered)
std_err=sqrt(sum(registered$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=registered$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=which(p_vals<.05/nrow(data)) #Obserevation
#Removing outliers for casual
casual= lm(casual~.,data=data[,-49])
leverages=hatvalues(casual)
std_err=sqrt(sum(casual$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=casual$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outliers_cas=which(p_vals<.05/nrow(data)) #Obserevation
data.frame(colnames(data))
#Regressing casual and registered on all our explanatory variables
casual=lm(casual~.,data=data[-outliers_cas,-49])$residuals
registered=lm(registered~.,data=data[-outlier_reg,-48])$residuals
casual=lm(casual~.,data=data[-outliers_cas,-49])$residuals
registered=lm(registered~.,data=data[-outlier_reg,-48])$residuals
plot(casual, which=1)
plot(registered, which=1)
casual=lm(casual~.,data=data[-outliers_cas,-49])
registered=lm(registered~.,data=data[-outlier_reg,-48])
casual=lm(casual~.,data=data[-outliers_cas,-49])
registered=lm(registered~.,data=data[-outlier_reg,-48])
plot(casual, which=1)
plot(registered, which=1)
#Regressing casual and registered on all our explanatory variables
casual=lm(casual~.,data=data[-outliers_cas,-49])
registered=lm(registered~.,data=data[-outlier_reg,-48])
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/casreg_resid.png")
plot(casual, which=1, main="Residuals and Fitted Values for Casual Bike Rentals")
plot(registered, which=1, main="Residuals and Fitted Values for Registered Bike Rentals")
dev.off()
casual=lm(casual~.,data=data[-outliers_cas,-49])
registered=lm(registered~.,data=data[-outlier_reg,-48])
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/casreg_resid.png")
par(mfrow=c(2,1))
plot(casual, which=1, main="Residuals and Fitted Values for Casual Bike Rentals")
plot(registered, which=1, main="Residuals and Fitted Values for Registered Bike Rentals")
dev.off()
par(mfrow=c(2,1))
plot(casual, which=1, main="Residuals and Fitted Values for Casual Bike Rentals")
plot(registered, which=1, main="Residuals and Fitted Values for Registered Bike Rentals")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/logarithm.png")
par(mfrow=c(1,1))
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
dev.off()
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/logarithm.png")
par(mfrow=c(2,2))
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
dev.off()
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/logarithm.png")
par(mfrow=c(2,2))
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
dev.off()
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
par(mfrow=c(2,2))
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/logarithm.png")
par(mfrow=c(2,2))
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
dev.off()
registered_day
registered_end
casual_day
casual_end
casual_day$coefficients
data.frame(casual_day$coefficients)
data.frame(colnames(data))
casual_day$coefficients[45]
casual_day$coefficients
casual_day$coefficients[46]
casual_end$coefficients[46]
registered_end$coefficients[46])
registered_end$coefficients[46]
registered_end$coefficients[46])
registered_end$coefficients[46]
registered_day$coefficients[46]
#Creating table to use in report
coef=c(as.numeric(casual_day$coefficients[46]), as.numeric(casual_end$coefficients[46]),as.numeric(registered_day$coefficients[46]), as.numeric(registered_end$coefficients[46]))
coef=coef*100
df1=data.frame(coef)
colnames(df1)=c("Percent Increase in Bike Rentals For a One Celsius Increase in Adjusted Temperature")
rownames(df1)=c("Effect of Temperature on Casual Bikers on a Weekday","Effect of Temperature on Casual Bikers on a Weekend","Effect of Temperature on Registered Bikers on a Weekday","Effect of Temperature on Casual Bikers on a Weekend")
rownames(df1)=c("Effect of Temperature on Casual Bikers on a Weekday","Effect of Temperature on Casual Bikers on a Weekend","Effect of Temperature on Registered Bikers on a Weekday","Effect of Temperature on Registered Bikers on a Weekend")
df1
View(df1)
save(df1, file="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/df1.RData")
?kable
casual_day$coefficients
casual_day
names(casual_day)
casual_day$coefficients
summary(casual_day)
summary(casual_day)$coef
summary(casual_day)$coef[46,]
summary(casual_day)$coef[44,]
summary(casual_day)$coef[44,4]
summary(casual_end)$coef[44,4]
summary(casual_end)$coef[44,]
summary(casual_end)$coef
summary(casual_end)$coef[54]
summary(casual_end)$coef[54,]
summary(casual_end)$coef
summary(casual_end)$coef[44]
summary(casual_end)$coef[44,]
summary(casual_end)$coef["atemp",]
#Creating table to use in report
coef=c(as.numeric(casual_day$coefficients[46]), as.numeric(casual_end$coefficients[46]),as.numeric(registered_day$coefficients[46]), as.numeric(registered_end$coefficients[46]))
p_vals=c(as.numeric(summary(casual_day)$coef[44,4]),as.numeric(summary(casual_end)$coef["atemp",4]), as.numeric(summary(registered_day)$coef["atemp",4]),as.numeric(summary(registered_end)$coef["atemp",4]))
df1=data.frame(coef, p_vals)
#Creating table to use in report
coef=c(as.numeric(casual_day$coefficients[46]), as.numeric(casual_end$coefficients[46]),as.numeric(registered_day$coefficients[46]), as.numeric(registered_end$coefficients[46]))
p_vals=c(as.numeric(summary(casual_day)$coef[44,4]),as.numeric(summary(casual_end)$coef["atemp",4]), as.numeric(summary(registered_day)$coef["atemp",4]),as.numeric(summary(registered_end)$coef["atemp",4]))
coef=coef*100
df1=data.frame(coef, p_vals)
colnames(df1)=c("Percent Increase in Bike Rentals For a One Celsius Increase in Adjusted Temperature", "P-Values for Beta Coefficient for Adjusted Temperature ")
rownames(df1)=c("Effect of Temperature on Casual Bikers on a Weekday","Effect of Temperature on Casual Bikers on a Weekend","Effect of Temperature on Registered Bikers on a Weekday","Effect of Temperature on Registered Bikers on a Weekend")
save(df1, file="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/df1.RData")
#what is a good predictive equation for predicting the number of bike rentals in a particular hour in terms of environmental and seasonal variables?
library(leaps)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/BikeSharingDataset.csv")
data=data[,c(3,10,12,13,14,17)]
data$weathersit=as.factor(data$weathersit)
data$season=as.factor(data$season)
data=model.matrix(~., data=data) #converting season to multiple binary variables
data=as.data.frame(data[,-1])
ncol(data)
data.frame(colnames(data))
#Getting rid of outliers
library(MASS)
lm_obj= lm(cnt~.,data=data[,-10])
leverages=hatvalues(lm_obj)
std_err=sqrt(sum(lm_obj$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=lm_obj$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=as.numeric(which(p_vals<.05/nrow(data))) #Observation
data.frame(colnames(data))
outliers
library(MASS)
lm_obj= lm(cnt~.,data=data)
leverages=hatvalues(lm_obj)
std_err=sqrt(sum(lm_obj$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=lm_obj$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=as.numeric(which(p_vals<.05/nrow(data))) #Observation
outlier_reg
500*500
sqrt(25000)
#Creating a binary weekend variable
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/BikeSharingDataset.csv")
end=which(data$weekday==0| data$weekday==6)
day=which(data$weekday!=0 & data$weekday!=6)
data$day_of_week=data$weekday
data$weekday=NULL
data$weekend=rep(0, nrow(data))
data$weekend[end]=1
data$weekend[day]=0
#converting numerical categories to factors
data=data[,-c(1,2,10,16)]
data$weathersit=as.factor(data$weathersit)
data$day_of_week=as.factor(data$day_of_week)
data$season=as.factor(data$season)
data$mnth=as.factor(data$mnth)
data$hr=as.factor(data$hr)
data=model.matrix(~., data=data) #converting season to multiple binary variables
data=as.data.frame(data[-1,])
ncol(data)
#Getting rid of outliers
library(MASS)
lm_obj= lm(lg(cnt+1)~.,data=data)
leverages=hatvalues(lm_obj)
std_err=sqrt(sum(lm_obj$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=lm_obj$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=as.numeric(which(p_vals<.05/nrow(data))) #Observation
library(leaps)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/BikeSharingDataset.csv")
data=data[,c(3,10,12,13,14,17)]
data$weathersit=as.factor(data$weathersit)
data$season=as.factor(data$season)
data=model.matrix(~., data=data) #converting season to multiple binary variables
data=as.data.frame(data[,-1])
#Getting rid of outliers
library(MASS)
lm_obj= lm(log(cnt+1)~.,data=data)
leverages=hatvalues(lm_obj)
std_err=sqrt(sum(lm_obj$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=lm_obj$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=as.numeric(which(p_vals<.05/nrow(data))) #Observ
outlier_reg
#Reading in data and cleaning it
library(leaps)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/BikeSharingDataset.csv")
data=data[,c(3,10,12,13,14,17)] #only taking subset of data that corresponds to environmental/seasonal variables
data$weathersit=as.factor(data$weathersit)
data$season=as.factor(data$season)
data=model.matrix(~., data=data) #converting season to multiple binary variables
data=as.data.frame(data[,-1])
#Getting rid of outliers
library(MASS)
lm_obj= lm(log(cnt+1)~.,data=data)
leverages=hatvalues(lm_obj)
std_err=sqrt(sum(lm_obj$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=lm_obj$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=as.numeric(which(p_vals<.05/nrow(data)))
#Partial Regression Plots without transformation
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/partial_regression.png")
par(mfrow=c(3,1))
y_res_temp=lm(cnt~.,data=data[,-7])$residuals
x_res_temp=lm(atemp~., data=data[,-10])$residuals
plot(x_res_temp,y_res_temp, main="Partial Regression Plot For Adjusted Temperature Variable")
y_res_windspeed=lm(cnt~.,data=data[,-9])$residuals
x_res_windspeed=lm(atemp~., data=data[,-10])$residuals
plot(x_res_windspeed,y_res_windspeed, main="Partial Regression Plot for Windspeed Variable")
y_res_hum=lm(cnt~.,data=data[,-8])$residuals
x_res_hum=lm(atemp~., data=data[,-10])$residuals
plot(x_res_hum,y_res_hum, main="Partial Regression Plot for Humidity Variable")
dev.off()
#Partial Regression Plots with log transformation
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/partial_regression_transformed.png")
par(mfrow=c(3,1))
y_res_temp=lm(log(cnt+1)~.,data=data[,-7])$residuals
x_res_temp=lm(atemp~., data=data[,-10])$residuals
plot(x_res_temp,y_res_temp, main="Partial Regression Plot For Adjusted Temperature Variable")
y_res_windspeed=lm(log(cnt+1)~.,data=data[,-9])$residuals
x_res_windspeed=lm(atemp~., data=data[,-10])$residuals
plot(x_res_windspeed,y_res_windspeed, main="Partial Regression Plot for Windspeed Variable")
y_res_hum=lm(log(cnt+1)~.,data=data[,-8])$residuals
x_res_hum=lm(atemp~., data=data[,-10])$residuals
plot(x_res_hum,y_res_hum, main="Partial Regression Plot for Humidity Variable")
dev.off()
##### CALCULATING MSE FOR TRANFORMED REGRESSION ##########
#Doing an exhaustive search to find best number of variables to use
model=summary(regsubsets(log(cnt+1)~.,data=data, nvmax=16))
#Adjusted R-Squared
which.max(model$adjr2) #Tells us to use 9 variables
#AIC
which.min(model$bic-((ncol(data)+1)*log(nrow(data))) + (2*(ncol(data)+1))) #6 variables
#BIC
which.min(model$bic) #6 variables
#Mallow's CP
which.min(model$cp) #9 variables
#Below function does cross validation
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(log(cnt+1)~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=exp(as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ])))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #28817.16
cv_mse(data, c("season2", "season3","season4", "weathersit2","weathersit3", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #28973.29
#With our transformed regression, using 6 variables is the optimal number to use
#######################################
##### CALCULATING MSE FOR UNTRANFORMED REGRESSION ##########
model1=summary(regsubsets(cnt~.,data=data, nvmax=16))
#Adjusted R-Squared
which.max(model1$adjr2) #Tells us to use 7 variables
#AIC
which.min(model1$bic-((ncol(data)+1)*log(nrow(data))) + (2*(ncol(data)+1))) #6 variables
#BIC
which.min(model1$bic) #6 variables
#Mallow's CP
which.min(model1$cp) #6 variables
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(cnt~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ]))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #23682.54
cv_mse(data, c("season3","season4", "weathersit2", "atemp", "weathersit4", "hum", "windspeed", "cnt")) #23680.92
#With our transformed regression, using 7 variables is the optimal number to use
#######################################
#Creating table to use in report
mse=c(23680.92,28817.16)
df=data.frame(c(mse[1],model1$which[7,-1]), c(mse[2],model$which[6,-1]))
colnames(df)=c("Untransformed Regression", "Transformed Regression")
rownames(df)[1]=c("Mean Squared Error")
save(df, file="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/df.RData")
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3/code/scripts")
>>>>>>> variable_selection
clean_data=read.csv("../../data/clean_data.csv")[-1]
library(shiny)
source("functions.R")
ui <- fluidPage(
actionButton("click", label="Generate Relevant Variables"), #Creating an action button
textInput("text", label = h3("Text input"), value = "Lasso, BIC, P-Value"), #Creating an input widget
radioButtons("radio", label = h3("Select Graduation Rate of Interest"),
choices = list("Overall Graduation Rate" = "C150_4", "Graduation Rates of White People" = "C150_4_WHITE", "Graduation Rates of Black People" = "C150_4_BLACK",
"Graduation Rates of Hispanic People"="C150_4_HISP", "Graduation Rates of Asian People"="C150_4_ASIAN", "Graduation Rates of Native Americans"="C150_4_AIAN",
"Graduation Rates of Pacific Islanders"="C150_4_NHPI"),
selected = 1),
numericInput("var_num", label=h3("Number of Variables"), value=1:10),
tableOutput("variables")
)
server <- function(input, output){
observeEvent(input$click,{
df=choosing_response(clean_data, input$radio)
if(input$text=="Lasso"){
output$variables=renderTable({lasso_select(df,input$radio,input$var_num)})
}
else if(input$text=="BIC"){
output$variables=renderTable({bic_select(df,input$radio,input$var_num)})
}
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
actionButton("click", label="Generate Relevant Variables"), #Creating an action button
radioButtons("text", label=h3("Variable Selection Method"), choices=list("Lasso"="Lasso", "BIC"="BIC","P-Value"="P-Value"))
radioButtons("radio", label = h3("Select Graduation Rate of Interest"),
choices = list("Overall Graduation Rate" = "C150_4", "Graduation Rates of White People" = "C150_4_WHITE", "Graduation Rates of Black People" = "C150_4_BLACK",
"Graduation Rates of Hispanic People"="C150_4_HISP", "Graduation Rates of Asian People"="C150_4_ASIAN", "Graduation Rates of Native Americans"="C150_4_AIAN",
"Graduation Rates of Pacific Islanders"="C150_4_NHPI"),
selected = 1),
numericInput("var_num", label=h3("Number of Variables"), value=1:10),
tableOutput("variables")
)
server <- function(input, output){
observeEvent(input$click,{
df=choosing_response(clean_data, input$radio)
if(input$text=="Lasso"){
output$variables=renderTable({lasso_select(df,input$radio,input$var_num)})
}
else if(input$text=="BIC"){
output$variables=renderTable({bic_select(df,input$radio,input$var_num)})
}
})
}
shinyApp(ui = ui, server = server)
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3/code/scripts")
clean_data=read.csv("../../data/clean_data.csv")[-1]
library(shiny)
source("functions.R")
ui <- fluidPage(
actionButton("click", label="Generate Relevant Variables"), #Creating an action button
radioButtons("text", label=h3("Variable Selection Method"), choices=list("Lasso"="Lasso", "BIC"="BIC","P-Value"="P-Value"))
radioButtons("radio", label = h3("Select Graduation Rate of Interest"),
choices = list("Overall Graduation Rate" = "C150_4", "Graduation Rates of White People" = "C150_4_WHITE", "Graduation Rates of Black People" = "C150_4_BLACK",
"Graduation Rates of Hispanic People"="C150_4_HISP", "Graduation Rates of Asian People"="C150_4_ASIAN", "Graduation Rates of Native Americans"="C150_4_AIAN",
"Graduation Rates of Pacific Islanders"="C150_4_NHPI"),
selected = 1),
numericInput("var_num", label=h3("Number of Variables"), value=1:10),
tableOutput("variables")
)
server <- function(input, output){
observeEvent(input$click,{
df=choosing_response(clean_data, input$radio)
if(input$text=="Lasso"){
output$variables=renderTable({lasso_select(df,input$radio,input$var_num)})
}
else if(input$text=="BIC"){
output$variables=renderTable({bic_select(df,input$radio,input$var_num)})
}
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
actionButton("click", label="Generate Relevant Variables"), #Creating an action button
radioButtons("text", label=h3("Variable Selection Method"), choices=list("Lasso"="Lasso", "BIC"="BIC","P-Value"="P-Value")),
radioButtons("radio", label = h3("Select Graduation Rate of Interest"),
choices = list("Overall Graduation Rate" = "C150_4", "Graduation Rates of White People" = "C150_4_WHITE", "Graduation Rates of Black People" = "C150_4_BLACK",
"Graduation Rates of Hispanic People"="C150_4_HISP", "Graduation Rates of Asian People"="C150_4_ASIAN", "Graduation Rates of Native Americans"="C150_4_AIAN",
"Graduation Rates of Pacific Islanders"="C150_4_NHPI"),
selected = 1),
numericInput("var_num", label=h3("Number of Variables"), value=1:10),
tableOutput("variables")
)
server <- function(input, output){
observeEvent(input$click,{
df=choosing_response(clean_data, input$radio)
if(input$text=="Lasso"){
output$variables=renderTable({lasso_select(df,input$radio,input$var_num)})
}
else if(input$text=="BIC"){
output$variables=renderTable({bic_select(df,input$radio,input$var_num)})
}
})
}
shinyApp(ui = ui, server = server)
>>>>>>> 58d2344dfb54fac5cddb638c01f6ebb1c7444a6a
