View(clean_data)
clean_data$PREDDEG=NULL # all values are 3, so useless variable
clean_data$PREDDEG=NULL # all values are 3, so useless variable
View(clean_data)
#Checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
}
v
class(clean_data[,2])
class(clean_data[,3])
class(clean_data[,4])
class(clean_data[,5])
class(clean_data[,6])
class(clean_data[,7])
data=read.csv("../../data/MERGED2014_15_PP.csv")
#Data cleaning
selected_data <- data %>%
filter(PREDDEG == 3) %>% #Degree awarded predominantly bachelor
filter(MAIN == 1) %>% #Main campus
filter(CONTROL == 1) #Public schools
#Variables we are going to use
x_variables <- selected_data %>%
select(UNITID, PREDDEG, MAIN, CONTROL, INSTNM, CITY, ZIP, ST_FIPS, REGION, LOCALE2, ADM_RATE, ADM_RATE_ALL, SATVR25, SATVR75, SATMT25, SATMT75, SATWR25,
SATWR75, SATVRMID, SATMTMID, SATWRMID, ACTCM25, ACTCM75, ACTEN25, ACTEN75, ACTMT25, ACTMT75, ACTWR25, ACTWR75, ACTCMMID,
ACTENMID, ACTMTMID, ACTWRMID, SAT_AVG, SAT_AVG_ALL, PCIP01, PCIP03, PCIP04, PCIP05, PCIP09, PCIP10, PCIP11, PCIP12, PCIP13,
PCIP14, PCIP15, PCIP16, PCIP19, PCIP22, PCIP23, PCIP24, PCIP25, PCIP26, PCIP27, PCIP29, PCIP30, PCIP31, PCIP38, PCIP39,
PCIP40, PCIP41, PCIP42, PCIP43, PCIP44, PCIP45, PCIP46, PCIP47, PCIP48, PCIP49, PCIP50, PCIP51, PCIP52, PCIP54, NPT4_PUB,
NPT41_PUB, NPT42_PUB, NPT43_PUB, NPT44_PUB, NPT45_PUB, NUM4_PUB, NUM41_PUB, NUM42_PUB, NUM43_PUB, NUM44_PUB, NUM45_PUB,
COSTT4_A, TUITIONFEE_IN, TUITIONFEE_OUT, AVGFACSAL, PFTFAC, OVERALL_YR4_N, LO_INC_YR4_N, MD_INC_YR4_N, HI_INC_YR4_N, DEP_YR4_N,
IND_YR4_N, FEMALE_YR4_N, MALE_YR4_N, FIRSTGEN_YR4_N, NOT1STGEN_YR4_N, OVERALL_YR6_N, LO_INC_YR6_N, MD_INC_YR6_N, HI_INC_YR6_N,
DEP_YR6_N, IND_YR6_N, FEMALE_YR6_N, MALE_YR6_N, FIRSTGEN_YR6_N, NOT1STGEN_YR6_N, AGE_ENTRY, AGEGE24, FEMALE, MARRIED, DEPENDENT,
VETERAN, FIRST_GEN)
y_variables <- selected_data %>%
select(INSTNM, C150_4, COMP_ORIG_YR6_RT, COMP_4YR_TRANS_YR6_RT, LO_INC_COMP_ORIG_YR6_RT, LO_INC_COMP_4YR_TRANS_YR6_RT, MD_INC_COMP_ORIG_YR6_RT,
MD_INC_COMP_4YR_TRANS_YR6_RT, HI_INC_COMP_ORIG_YR6_RT, HI_INC_COMP_4YR_TRANS_YR6_RT, DEP_COMP_ORIG_YR6_RT, DEP_COMP_4YR_TRANS_YR6_RT,
IND_COMP_ORIG_YR6_RT, IND_COMP_4YR_TRANS_YR6_RT, FEMALE_COMP_ORIG_YR6_RT, FEMALE_COMP_4YR_TRANS_YR6_RT, MALE_COMP_ORIG_YR6_RT,
MALE_COMP_4YR_TRANS_YR6_RT, FIRSTGEN_COMP_ORIG_YR6_RT, FIRSTGEN_COMP_4YR_TRANS_YR6_RT, NOT1STGEN_COMP_ORIG_YR6_RT,
NOT1STGEN_COMP_4YR_TRANS_YR6_RT)
race_and_income <- selected_data %>%
select(INSTNM, UGDS, UG, UGDS_WHITE, UGDS_BLACK, UGDS_HISP, UGDS_ASIAN, UGDS_AIAN, UGDS_NHPI, UGDS_2MOR, UGDS_NRA, UGDS_UNKN, UGDS_WHITENH,
UGDS_BLACKNH, UGDS_API, UGDS_AIANOLD, UGDS_HISPOLD, UG_NRA, UG_UNKN, UG_WHITENH, UG_BLACKNH, UG_API, UG_AIANOLD, UG_HISPOLD,
PPTUG_EF, PPTUG_EF2, CURROPER, NPT4_048_PUB, NPT4_3075_PUB, NPT4_75UP_PUB)
merge_1 <- merge(x_variables, y_variables, by = "INSTNM")
clean_data <- merge(merge_1, race_and_income, by = "INSTNM")
#Converting types of variables that don't make any sense (and getting rid of some variables)
clean_data$PREDDEG=as.factor(clean_data$PREDDEG) #PREDDEG tells us the predominant type of degree given in a univ
clean_data$CITY=NULL  #Don't need city variable in my opinion
clean_data$ZIP=NULL #Don't need zip code variable in my opinion
clean_data$ST_FIPS= as.factor(clean_data$ST_FIPS) #State should not be an integer variable
clean_data$ST_FIPS=NULL #Don't need state variable when we have a region variable
clean_data$REGION= as.factor(clean_data$REGION) #Region should not be an integer variable
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,114:133,135,145:156,158)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #converting all these factors  into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
#getting rid of 4 more useless variables
clean_data$INSTNM=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL # all values are 3, so useless variable
clean_data[,3:7]=apply(clean_data[,3:7] , 2, as.numeric)
#Checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
}
v
clean_data=model.matrix(~., clean_data)
View(clean_data)
sum(clean_data$REGION9)
sum(as.data.frame(clean_data)$REGION9)
clean_data <- merge(merge_1, race_and_income, by = "INSTNM")
#Converting types of variables that don't make any sense (and getting rid of some variables)
clean_data$PREDDEG=as.factor(clean_data$PREDDEG) #PREDDEG tells us the predominant type of degree given in a univ
clean_data$CITY=NULL  #Don't need city variable in my opinion
clean_data$ZIP=NULL #Don't need zip code variable in my opinion
clean_data$ST_FIPS= as.factor(clean_data$ST_FIPS) #State should not be an integer variable
clean_data$ST_FIPS=NULL #Don't need state variable when we have a region variable
clean_data$REGION= as.factor(clean_data$REGION) #Region should not be an integer variable
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,114:133,135,145:156,158)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #converting all these factors  into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
#getting rid of 4 more useless variables
clean_data$INSTNM=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL # all values are 3, so useless variable
clean_data[,3:7]=apply(clean_data[,3:7] , 2, as.numeric)
#Checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
}
table(clean_data$REGION)
which(clean_data$REGION==0)
clean_data=model.matrix(~., clean_data)
View(clean_data)
clean_data=as.data.frame(clean_data)[,-1]
#scaling non-categorical variables
for (i in c(2:ncol(clean_data))){
clean_data[,i]=scale(clean_data[,i])
}
#clean race and income and y and x variables
write.csv(clean_data, file = '../../data/clean_data.csv')
write.csv(race_and_income, file='../../data/race_and_income.csv')
write.csv(y_variables, file='../../data/y_variables.csv')
write.csv(x_variables, file='../../data/x_variables.csv')
clean_data=read.csv("../../data/clean_data.csv")
#Data Cleaning
response=which(colnames(clean_data)=="UGDS_BLACK")
clean_data[,setdiff(90:99, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
reg=lm(UGDS_BLACK~., data=clean_data)
View(clean_data)
clean_data <- merge(merge_1, race_and_income, by = "INSTNM")
#Converting types of variables that don't make any sense (and getting rid of some variables)
clean_data$PREDDEG=as.factor(clean_data$PREDDEG) #PREDDEG tells us the predominant type of degree given in a univ
clean_data$CITY=NULL  #Don't need city variable in my opinion
clean_data$ZIP=NULL #Don't need zip code variable in my opinion
clean_data$ST_FIPS= as.factor(clean_data$ST_FIPS) #State should not be an integer variable
clean_data$ST_FIPS=NULL #Don't need state variable when we have a region variable
clean_data$REGION= as.factor(clean_data$REGION) #Region should not be an integer variable
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,114:133,135,145:156,158)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #converting all these factors  into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
#getting rid of 4 more useless variables
clean_data$INSTNM=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL # all values are 3, so useless variable
clean_data[,3:7]=apply(clean_data[,3:7] , 2, as.numeric)
#Checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
}
#converting categorical columns into multiple binary columns
clean_data=model.matrix(~., clean_data)
clean_data=as.data.frame(clean_data)[,-1]
View(clean_data)
#scaling non-categorical variables
for (i in c(10:ncol(clean_data))){
clean_data[,i]=scale(clean_data[,i])
}
#clean race and income and y and x variables
write.csv(clean_data, file = '../../data/clean_data.csv')
write.csv(race_and_income, file='../../data/race_and_income.csv')
write.csv(y_variables, file='../../data/y_variables.csv')
write.csv(x_variables, file='../../data/x_variables.csv')
clean_data=read.csv("../../data/clean_data.csv")
#Data Cleaning
response=which(colnames(clean_data)=="UGDS_BLACK")
clean_data[,setdiff(90:99, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
reg=lm(UGDS_BLACK~., data=clean_data)
View(clean_data)
nrow(clean_data)
clean_data <- merge(merge_1, race_and_income, by = "INSTNM")
#Converting types of variables that don't make any sense (and getting rid of some variables)
clean_data$PREDDEG=as.factor(clean_data$PREDDEG) #PREDDEG tells us the predominant type of degree given in a univ
clean_data$CITY=NULL  #Don't need city variable in my opinion
clean_data$ZIP=NULL #Don't need zip code variable in my opinion
clean_data$ST_FIPS= as.factor(clean_data$ST_FIPS) #State should not be an integer variable
clean_data$ST_FIPS=NULL #Don't need state variable when we have a region variable
clean_data$REGION= as.factor(clean_data$REGION) #Region should not be an integer variable
clean_data$LOCALE2=NULL # Too many NULL values here
clean_data$ADM_RATE=as.numeric(as.character(clean_data$ADM_RATE)) #admission rates shouldnt be a factor
clean_data$ADM_RATE_ALL=NULL #no need for two admission rates... 99% correlation between above adm rate
clean_data[,13:85]=apply(clean_data[,13:85], 2, as.numeric) #converting all sat/act scores and percentage of people in certain degrees into numeric variables
clean_data[,c(86:105,107,114:133,135,145:156,158)]=NULL #Removing variables with several Null values
clean_data[,86:ncol(clean_data)]=apply(clean_data[,86:ncol(clean_data)], 2, as.numeric) #converting all these factors  into numeric variables
clean_data$CURROPER=NULL #Takes on only 1 variable
#getting rid of 4 more useless variables
clean_data$INSTNM=NULL
clean_data$UNITID=NULL
clean_data$MAIN=NULL #all of our schools are main campuses
clean_data$CONTROL=NULL # all of our schools are public
clean_data$PREDDEG=NULL # all values are 3, so useless variable
clean_data[,3:7]=apply(clean_data[,3:7] , 2, as.numeric)
#Checking to see variable types
v=vector()
for(i in 1:ncol(clean_data)){
v[i]=class(clean_data[,i])
}
for(i in 1:ncol(clean_data)){
clean_data[is.na(test[,i]),i]=mean(clean_data[,i], na.rm=TRUE)
}
for(i in 1:ncol(clean_data)){
clean_data[is.na(clean_data[,i]),i]=mean(clean_data[,i], na.rm=TRUE)
}
View(clean_data)
clean_data=model.matrix(~., clean_data)
clean_data=as.data.frame(clean_data)[,-1]
#scaling non-categorical variables
for (i in c(10:ncol(clean_data))){
clean_data[,i]=scale(clean_data[,i])
}
#clean race and income and y and x variables
write.csv(clean_data, file = '../../data/clean_data.csv')
write.csv(race_and_income, file='../../data/race_and_income.csv')
write.csv(y_variables, file='../../data/y_variables.csv')
write.csv(x_variables, file='../../data/x_variables.csv')
clean_data=read.csv("../../data/clean_data.csv")
#Data Cleaning
response=which(colnames(clean_data)=="UGDS_BLACK")
clean_data[,setdiff(90:99, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
reg=lm(UGDS_BLACK~., data=clean_data)
reg
lasso=cv.glmnet(as.matrix(clean_data[,-response]), clean_data$UGDS_BLACK)
sparse_vector=glmnet(as.matrix(clean_data[,-response]), clean_data$UGDS_BLACK, lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
nzero_names=row.names(coef(sparse_vector))[relevant] #Printing out the names of our relevant variables!
nzero_names
#Lasso for Variable Selection
lasso=cv.glmnet(as.matrix(clean_data[,-response]), clean_data$UGDS_BLACK)
plot(lasso)
sparse_vector=glmnet(as.matrix(clean_data[,-response]), clean_data$UGDS_BLACK, lambda=lasso$lambda.1se)
sparse_vector
coef(sparse_vector)
lasso=cv.glmnet(as.matrix(clean_data[,-response]), clean_data$UGDS_BLACK)
sparse_vector=glmnet(as.matrix(clean_data[,-response]), clean_data$UGDS_BLACK, lambda=lasso$lambda.1se)
lasso
response=which(colnames(clean_data)=="UGDS_BLACK")
View(clean_data)
colnames(clean_data)
which(colnames(clean_data)=="UGDS_BLACK")
clean_data[,setdiff(90:97, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
clean_data
colnames(clean_data)
lasso=cv.glmnet(as.matrix(clean_data[,-response]), clean_data$UGDS_BLACK)
sparse_vector=glmnet(as.matrix(clean_data[,-response]), clean_data$UGDS_BLACK, lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
nzero_names=row.names(coef(sparse_vector))[relevant] #Printing out the names of our relevant variables!
nzero_names
?regsubsets
model=summary(regsubsets(UGDS_BLACK~.,data=clean_data, method="forward", nvmax=ncol(clean_data)))
which.min((model$bic-(log(nrow(bodyfat))*(1+ncol(bodyfat)))+ 2*(1+ncol(bodyfat)))) #4
which.min(model$bic) #4
which.min((model$bic-(log(nrow(clean_data))*(1+ncol(clean_data)))+ 2*(1+ncol(clean_data)))) #4
lasso_var=row.names(coef(sparse_vector))[relevant] #Printing out the names of our relevant variables!
bic_var=model[which.min(model$bic),]
bic_var=model[which.min(model$bic),]
model=summary(regsubsets(UGDS_BLACK~.,data=clean_data, method="forward", nvmax=ncol(clean_data)))
model$which
bic_var=model$which[which.min(model$bic),]
bic_var
bic_var=which(model$which[which.min(model$bic),]==TRUE)
bic_var=subset(model$which[which.min(model$bic),]==TRUE)
bic_var=model$which[which.min(model$bic),]==TRUE
bic_var
bic_var=model$which[which.min(model$bic),]
View(bic_var)
bic_var
bic_var=bic_var[which(bic_var==TRUE)]
bic_var
bic_var=as.character(bic_var[which(bic_var==TRUE)])
bic_var
bic_var=bic_var[which(bic_var==TRUE)]
bic_var
bic_var=model$which[which.min(model$bic),]
bic_var=bic_var[which(bic_var==TRUE)]
bic_var
View(model$which)
relevant=which(bic_var==TRUE)
relevant
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
bic_var
lasso_var
colnames(data_clean)[90:97]
colnames(clean_data)[90:97]
View(clean_data)
clean_data=read.csv("../../data/clean_data.csv")
View(clean_data)
colnames(clean_data)[90:97]
View(clean_data)
View(clean_data[80:ncol(clean_data)])
ncol(clean_dta)
ncol(clean_data)
colnams(clean_data)
colnames(clean_data)
response=which(colnames(clean_data)=="UGDS_BLACK")
response
clean_data=read.csv("../../data/clean_data.csv")
response=which(colnames(clean_data)=="UGDS_BLACK")
response
clean_data[,setdiff(97:106, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
setdiff(97:106, 99)
#Lasso for Variable Selection
lasso=cv.glmnet(as.matrix(clean_data[,-response]), clean_data$UGDS_BLACK)
sparse_vector=glmnet(as.matrix(clean_data[,-response]), clean_data$UGDS_BLACK, lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=row.names(coef(sparse_vector))[relevant] #Printing out the names of our relevant variables!
#BIC With Forward Selection for Variable Selection
model=summary(regsubsets(UGDS_BLACK~.,data=clean_data, method="forward", nvmax=ncol(clean_data)))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
lasso_var
bic_var
-which(colnames(clean_data=="UGDS_BLACK")
)
which(colnames(clean_data)=="UGDS_BLACK")
clean_data=read.csv("../../data/clean_data.csv")
#Data Cleaning
response=which(colnames(clean_data)=="UGDS_BLACK")
clean_data[,setdiff(97:106, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
#Lasso for Variable Selection
lasso=cv.glmnet(as.matrix(clean_data[,-which(colnames(clean_data)=="UGDS_BLACK")), clean_data$UGDS_BLACK)
sparse_vector=glmnet(as.matrix(clean_data[,-which(colnames(clean_data)=="UGDS_BLACK")]), clean_data$UGDS_BLACK, lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=row.names(coef(sparse_vector))[relevant] #Printing out the names of our relevant variables!
lasso=cv.glmnet(as.matrix(clean_data[,-which(colnames(clean_data)=="UGDS_BLACK")), clean_data$UGDS_BLACK)
clean_data=read.csv("../../data/clean_data.csv")
clean_data=read.csv("../../data/clean_data.csv")
response=which(colnames(clean_data)=="UGDS_BLACK")
clean_data[,setdiff(97:106, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
lasso=cv.glmnet(as.matrix(clean_data[,-which(colnames(clean_data)=="UGDS_BLACK")]), clean_data$UGDS_BLACK)
sparse_vector=glmnet(as.matrix(clean_data[,-which(colnames(clean_data)=="UGDS_BLACK")]), clean_data$UGDS_BLACK, lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=row.names(coef(sparse_vector))[relevant] #Printing out the names of our relevant variables!
lasso_var
#BIC With Forward Selection for Variable Selection
model=summary(regsubsets(UGDS_BLACK~.,data=clean_data, method="forward", nvmax=ncol(clean_data)))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
clean_data=read.csv("../../data/clean_data.csv")
colnames(clean_data)[97:106]
choosing_response=function(character){
response=which(colnames(clean_data)==character)
clean_data[,setdiff(97:106, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
return(clean_data)
}
df=choosing_response("UGDS_BLACK")
df==clean_data
View(df)
clean_data=read.csv("../../data/clean_data.csv")
View(clean_data)
clean_data=read.csv("../../data/clean_data.csv")[,-1]
View(clean_data)
lasso_select=function(dataframe, character){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), clean_data[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(clean_data[,-which(colnames(clean_data)==character)]), clean_data[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=row.names(coef(sparse_vector))[relevant] #Printing out the names of our relevant variables!
return(lasso_var)
}
choosing_response("UGDS")
sample=choosing_response("UGDS")
lasso_select(sample, "UGDS")
bic_select=function(dataframe, character){
model=summary(regsubsets(character~.,data=dataframe, method="forward", nvmax=ncol(dataframe)))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
return(bic_var)
}
sample=choosing_response("UGDS
")
bic_select(sample, "UGDS")
character="UGDS"
regsubsets(character~.,data=dataframe, method="forward", nvmax=ncol(dataframe))
dataframe=sample
regsubsets(character~.,data=dataframe, method="forward", nvmax=ncol(dataframe))
regsubsets(UGDS~.,data=dataframe, method="forward", nvmax=ncol(dataframe))
regsubsets("UGDS"~.,data=dataframe, method="forward", nvmax=ncol(dataframe))
?regsubsets
lasso_select=function(dataframe, character){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=row.names(coef(sparse_vector))[relevant] #Printing out the names of our relevant variables!
return(lasso_var)
}
bic_select=function(dataframe, character){
model=summary(regsubsets(dataframe[,-which(colnames(dataframe)==character)]),dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=ncol(dataframe)))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
return(bic_var)
}
bic_select=function(dataframe, character){
model=summary(regsubsets(dataframe[,-which(colnames(dataframe)==character)]),dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=ncol(dataframe))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
return(bic_var)
}
lasso_select=function(dataframe, character){
lasso=cv.glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)])
sparse_vector=glmnet(as.matrix(dataframe[,-which(colnames(dataframe)==character)]), dataframe[,which(colnames(dataframe)==character)], lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=row.names(coef(sparse_vector))[relevant] #Printing out the names of our relevant variables!
return(lasso_var)
}
choosing_response=function(character){
response=which(colnames(clean_data)==character)
clean_data[,setdiff(97:106, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
return(clean_data)
}
sample=choosing_response("UGDS")
lasso_select(sample, "UGDS")
bic_select(sample, "UGDS")
bic_select=function(dataframe, character){
model=summary(regsubsets(dataframe[,-which(colnames(dataframe)==character)],dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=ncol(dataframe))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
return(bic_var)
}
bic_select=function(dataframe, character){
model=summary(regsubsets(dataframe[,-which(colnames(dataframe)==character)],dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=ncol(dataframe)))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
return(bic_var)
}
bic_select(sample, "UGDS")
bic_select=function(dataframe, character){
model=summary(regsubsets(dataframe[,-which(colnames(dataframe)==character)],dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15)
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
return(bic_var)
}
bic_select=function(dataframe, character){
model=summary(regsubsets(dataframe[,-which(colnames(dataframe)==character)],dataframe[,which(colnames(dataframe)==character)], method="forward", nvmax=15))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
return(bic_var)
}
bic_select(sample, "UGDS")
clean_data=read.csv("../../data/clean_data.csv")[,-1]
#Data Cleaning
response=which(colnames(clean_data)=="UGDS_BLACK")
clean_data[,setdiff(97:106, response)]=NULL #getting rid of all graduation rates, except for black graduation rates
#Lasso for Variable Selection
lasso=cv.glmnet(as.matrix(clean_data[,-which(colnames(clean_data)=="UGDS_BLACK")]), clean_data$UGDS_BLACK)
sparse_vector=glmnet(as.matrix(clean_data[,-which(colnames(clean_data)=="UGDS_BLACK")]), clean_data$UGDS_BLACK, lambda=lasso$lambda.1se)
relevant=which(coef(sparse_vector)!=0)[-1] #Extracting the nonzero values of our beta vector (aka, the relevant variables)... also, i removed the beta coefficient corresponding to the intercept
lasso_var=row.names(coef(sparse_vector))[relevant] #Printing out the names of our relevant variables!
sparse_vector
coef(sparse_vector)
relevant
coef(sparse_vector)[relevant]
lasso_var=data.frame(row.names(coef(sparse_vector))[relevant], coef(sparse_vector)[relevant]) #Printing out the names of our relevant variables!
lasso_var
View(coef(sparse_vector))
coef(sparse_vector)
View(lasso_var)
bic_var
bic_var=colnames(model$which)[relevant]
#BIC With Forward Selection for Variable Selection
model=summary(regsubsets(UGDS_BLACK~.,data=clean_data, method="forward", nvmax=ncol(clean_data)))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
bic_var
which(colnames(clean_data)==bic_var)
which(colnames(clean_data) %in% bic_var)
lm_obj=lm(UGDS_BLACK~., data=clean_data[,which(colnames(clean_data) %in% bic_var)])
lm_obj=lm(UGDS_BLACK~., data=clean_data[,c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)=="UGDS_BLACK"))])
lm_obj
lm_obj$coefficients
bic_var=lm_obj$coefficients[-1]
?lm()
lm(y,x)
lm(clean_data, clean_data$UGDS)
character="UGDS"
lm_obj=lm(character~., data=clean_data[,c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)==character))])
lm_obj=lm(UGDS~., data=clean_data[,c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)=="UGDS"))])
lm_obj=lm(UGDS~., data=clean_data[,c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)=="UGDS"))])
lm_obj=lm(UGDS~., data=clean_data)
lm_obj=lm(UGDS~., data=clean_data[,c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)=="UGDS"))])
c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)=="UGDS"))
c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)=="UGDS"))
which(colnames(clean_data) %in% bic_var)
model=summary(regsubsets(UGDS_BLACK~.,data=clean_data, method="forward", nvmax=ncol(clean_data)))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
lm_obj=lm(UGDS_BLACK~., data=clean_data[,c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)=="UGDS_BLACK"))])
bic_var=lm_obj$coefficients[-1]
which(colnames(clean_data) %in% bic_var)
bic_var
#BIC With Forward Selection for Variable Selection
model=summary(regsubsets(UGDS_BLACK~.,data=clean_data, method="forward", nvmax=ncol(clean_data)))
bic_var=model$which[which.min(model$bic),]
relevant=which(bic_var==TRUE)[-1]
bic_var=colnames(model$which)[relevant]
bic_var
c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)==character))
lm(UGDS~., data=clean_data[,c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)=="UGDS"))])
character
lm(UGDS~., data=clean_data[,c(which(colnames(clean_data) %in% bic_var), which(colnames(clean_data)==character))])
