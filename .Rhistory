plot(x_res_hum,y_res_hum, main="Partial Regression Plot for Humidity Variable")
dev.off()
#Partial Regression Plots with transformation
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/partial_regression_transformed.png")
par(mfrow=c(3,1))
y_res_temp=lm(log(cnt+1)~.,data=data[-outlier_reg,-7])$residuals
x_res_temp=lm(atemp~., data=data[-outlier_reg,-10])$residuals
plot(x_res_temp,y_res_temp, main="Partial Regression Plot For Adjusted Temperature Variable")
y_res_windspeed=log(cnt+1)~.,data=data[-outlier_reg,-9])$residuals
x_res_windspeed=lm(atemp~., data=data[-outlier_reg,-10])$residuals
plot(x_res_windspeed,y_res_windspeed, main="Partial Regression Plot for Windspeed Variable")
y_res_hum=lm(log(cnt+1)~.,data=data[-outlier_reg,-8])$residuals
x_res_hum=lm(atemp~., data=data[-outlier_reg,-10])$residuals
plot(x_res_hum,y_res_hum, main="Partial Regression Plot for Humidity Variable")
dev.off()
par(mfrow=c(3,1))
y_res_temp=lm(log(cnt+1)~.,data=data[-outlier_reg,-7])$residuals
x_res_temp=lm(atemp~., data=data[-outlier_reg,-10])$residuals
plot(x_res_temp,y_res_temp, main="Partial Regression Plot For Adjusted Temperature Variable")
y_res_windspeed=log(cnt+1)~.,data=data[-outlier_reg,-9])$residuals
x_res_windspeed=lm(atemp~., data=data[-outlier_reg,-10])$residuals
plot(x_res_windspeed,y_res_windspeed, main="Partial Regression Plot for Windspeed Variable")
y_res_hum=lm(log(cnt+1)~.,data=data[-outlier_reg,-8])$residuals
x_res_hum=lm(atemp~., data=data[-outlier_reg,-10])$residuals
plot(x_res_hum,y_res_hum, main="Partial Regression Plot for Humidity Variable")
par(mfrow=c(3,1))
y_res_temp=lm(log(cnt+1)~.,data=data[-outlier_reg,-7])$residuals
x_res_temp=lm(atemp~., data=data[-outlier_reg,-10])$residuals
plot(x_res_temp,y_res_temp, main="Partial Regression Plot For Adjusted Temperature Variable")
y_res_windspeed=lm(log(cnt+1)~.,data=data[-outlier_reg,-9])$residuals
x_res_windspeed=lm(atemp~., data=data[-outlier_reg,-10])$residuals
plot(x_res_windspeed,y_res_windspeed, main="Partial Regression Plot for Windspeed Variable")
y_res_hum=lm(log(cnt+1)~.,data=data[-outlier_reg,-8])$residuals
x_res_hum=lm(atemp~., data=data[-outlier_reg,-10])$residuals
plot(x_res_hum,y_res_hum, main="Partial Regression Plot for Humidity Variable")
model=summary(regsubsets(log(cnt+1)~.,data=data[-outlier_reg,], nvmax=16))
#Adjusted R-Squared
which.max(model$adjr2) #Tells us to use 7 variables
#AIC
which.min(model$bic-((ncol(data)+1)*log(nrow(data))) + (2*(ncol(data)+1))) #6 variables
#BIC
which.min(model$bic) #6 variables
#Mallow's CP
which.min(model$cp) #7 variables
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(log(cnt+1)~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ]))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #63669.82
adjr2_mse=cv_mse(data, c("season3","season4", "weathersit2", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #63669.67
aic_mse
adjr2_mse
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(log(cnt+1)~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=e^(as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ])))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #63669.82
adjr2_mse=cv_mse(data, c("season3","season4", "weathersit2", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #63669.67
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(log(cnt+1)~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=exp(as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ])))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #63669.82
adjr2_mse=cv_mse(data, c("season3","season4", "weathersit2", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #63669.67
aic_mse
adjr2_mse
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #28817.16
aic_mse
adjr2_mse=cv_mse(data, c("season3","season4", "weathersit2", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #628819.72
adjr2_mse
model$which
model=summary(regsubsets(log(cnt+1)~.,data=data[-outlier_reg,], nvmax=16))
#Adjusted R-Squared
which.max(model$adjr2) #Tells us to use 9 variables
#AIC
which.min(model$bic-((ncol(data)+1)*log(nrow(data))) + (2*(ncol(data)+1))) #6 variables
#BIC
which.min(model$bic) #6 variables
#Mallow's CP
which.min(model$cp) #9 variables
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(log(cnt+1)~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=exp(as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ])))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #28817.16
adjr2_mse=cv_mse(data, c("season3","season4", "weathersit2","weathersit3","weathersit4", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #28819.72
adjr2_mse=cv_mse(data, c("season2", "season3","season4", "weathersit2","weathersit3", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #28819.72
adjr2_mse
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(cnt~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ]))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #23682.54
adjr2_mse=cv_mse(data, c("season3","season4", "weathersit2", "atemp", "weathersit4", "hum", "windspeed", "cnt")) #23680.92
adjr2_mse
model1=summary(regsubsets(cnt~.,data=data[-outlier_reg,], nvmax=16))
#Adjusted R-Squared
which.max(model1$adjr2) #Tells us to use 7 variables
#AIC
which.min(model1$bic-((ncol(data)+1)*log(nrow(data))) + (2*(ncol(data)+1))) #6 variables
#BIC
which.min(model1$bic) #6 variables
#Mallow's CP
which.min(model1$cp) #6 variables
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #23682.54
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(log(cnt+1)~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=exp(as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ])))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
aic_mse=cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #28817.16
adjr2_mse=cv_mse(data, c("season2", "season3","season4", "weathersit2","weathersit3", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #28973.29
aic_mse
#Creating table to use in report
mse=c(23680.92,28817.16)
df=data.frame(c(mse[1],model1$which[7,-1]), c(mse[2],model$which[6,-1]))
colnames(df)=c("Untransformed Regression", "Transformed Regression")
rownames(df)[1]=c("Mean Squared Error")
save(df, file="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/df.RData")
#Creating a binary weekend variable
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/BikeSharingDataset.csv")
end=which(data$weekday==0| data$weekday==6)
day=which(data$weekday!=0 & data$weekday!=6)
data$day_of_week=data$weekday
data$weekday=NULL
data$weekend=rep(0, nrow(data))
data$weekend[end]=1
data$weekend[day]=0
#converting numerical categories to factors
data=data[,-c(1,2,10,16)]
data$weathersit=as.factor(data$weathersit)
data$day_of_week=as.factor(data$day_of_week)
data$season=as.factor(data$season)
data$mnth=as.factor(data$mnth)
data$hr=as.factor(data$hr)
data=model.matrix(~., data=data) #converting season to multiple binary variables
data=as.data.frame(data[-1,])
#Removing outliers for registered
library(MASS)
registered= lm(registered~.,data=data[,-48])
leverages=hatvalues(registered)
std_err=sqrt(sum(registered$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=registered$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=which(p_vals<.05/nrow(data)) #Obserevation
#Removing outliers for casual
casual= lm(casual~.,data=data[,-49])
leverages=hatvalues(casual)
std_err=sqrt(sum(casual$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=casual$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outliers_cas=which(p_vals<.05/nrow(data)) #Obserevation
data.frame(colnames(data))
#Regressing casual and registered on all our explanatory variables
casual=lm(casual~.,data=data[-outliers_cas,-49])$residuals
registered=lm(registered~.,data=data[-outlier_reg,-48])$residuals
casual=lm(casual~.,data=data[-outliers_cas,-49])$residuals
registered=lm(registered~.,data=data[-outlier_reg,-48])$residuals
plot(casual, which=1)
plot(registered, which=1)
casual=lm(casual~.,data=data[-outliers_cas,-49])
registered=lm(registered~.,data=data[-outlier_reg,-48])
casual=lm(casual~.,data=data[-outliers_cas,-49])
registered=lm(registered~.,data=data[-outlier_reg,-48])
plot(casual, which=1)
plot(registered, which=1)
#Regressing casual and registered on all our explanatory variables
casual=lm(casual~.,data=data[-outliers_cas,-49])
registered=lm(registered~.,data=data[-outlier_reg,-48])
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/casreg_resid.png")
plot(casual, which=1, main="Residuals and Fitted Values for Casual Bike Rentals")
plot(registered, which=1, main="Residuals and Fitted Values for Registered Bike Rentals")
dev.off()
casual=lm(casual~.,data=data[-outliers_cas,-49])
registered=lm(registered~.,data=data[-outlier_reg,-48])
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/casreg_resid.png")
par(mfrow=c(2,1))
plot(casual, which=1, main="Residuals and Fitted Values for Casual Bike Rentals")
plot(registered, which=1, main="Residuals and Fitted Values for Registered Bike Rentals")
dev.off()
par(mfrow=c(2,1))
plot(casual, which=1, main="Residuals and Fitted Values for Casual Bike Rentals")
plot(registered, which=1, main="Residuals and Fitted Values for Registered Bike Rentals")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/logarithm.png")
par(mfrow=c(1,1))
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
dev.off()
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/logarithm.png")
par(mfrow=c(2,2))
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
dev.off()
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/logarithm.png")
par(mfrow=c(2,2))
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
dev.off()
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
par(mfrow=c(2,2))
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/logarithm.png")
par(mfrow=c(2,2))
plot(registered_day, which=1, main="Registered Bike Rentals on Weekday")
plot(registered_end, which=1, main= "Registered Bike Rentals on Weekend")
plot(casual_day, which=1, main= "Casual Bike Rentals on Weekday")
plot(casual_end, which=1, main="Casual Bike Rentals on Weekend")
dev.off()
registered_day
registered_end
casual_day
casual_end
casual_day$coefficients
data.frame(casual_day$coefficients)
data.frame(colnames(data))
casual_day$coefficients[45]
casual_day$coefficients
casual_day$coefficients[46]
casual_end$coefficients[46]
registered_end$coefficients[46])
registered_end$coefficients[46]
registered_end$coefficients[46])
registered_end$coefficients[46]
registered_day$coefficients[46]
#Creating table to use in report
coef=c(as.numeric(casual_day$coefficients[46]), as.numeric(casual_end$coefficients[46]),as.numeric(registered_day$coefficients[46]), as.numeric(registered_end$coefficients[46]))
coef=coef*100
df1=data.frame(coef)
colnames(df1)=c("Percent Increase in Bike Rentals For a One Celsius Increase in Adjusted Temperature")
rownames(df1)=c("Effect of Temperature on Casual Bikers on a Weekday","Effect of Temperature on Casual Bikers on a Weekend","Effect of Temperature on Registered Bikers on a Weekday","Effect of Temperature on Casual Bikers on a Weekend")
rownames(df1)=c("Effect of Temperature on Casual Bikers on a Weekday","Effect of Temperature on Casual Bikers on a Weekend","Effect of Temperature on Registered Bikers on a Weekday","Effect of Temperature on Registered Bikers on a Weekend")
df1
View(df1)
save(df1, file="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/df1.RData")
?kable
casual_day$coefficients
casual_day
names(casual_day)
casual_day$coefficients
summary(casual_day)
summary(casual_day)$coef
summary(casual_day)$coef[46,]
summary(casual_day)$coef[44,]
summary(casual_day)$coef[44,4]
summary(casual_end)$coef[44,4]
summary(casual_end)$coef[44,]
summary(casual_end)$coef
summary(casual_end)$coef[54]
summary(casual_end)$coef[54,]
summary(casual_end)$coef
summary(casual_end)$coef[44]
summary(casual_end)$coef[44,]
summary(casual_end)$coef["atemp",]
#Creating table to use in report
coef=c(as.numeric(casual_day$coefficients[46]), as.numeric(casual_end$coefficients[46]),as.numeric(registered_day$coefficients[46]), as.numeric(registered_end$coefficients[46]))
p_vals=c(as.numeric(summary(casual_day)$coef[44,4]),as.numeric(summary(casual_end)$coef["atemp",4]), as.numeric(summary(registered_day)$coef["atemp",4]),as.numeric(summary(registered_end)$coef["atemp",4]))
df1=data.frame(coef, p_vals)
#Creating table to use in report
coef=c(as.numeric(casual_day$coefficients[46]), as.numeric(casual_end$coefficients[46]),as.numeric(registered_day$coefficients[46]), as.numeric(registered_end$coefficients[46]))
p_vals=c(as.numeric(summary(casual_day)$coef[44,4]),as.numeric(summary(casual_end)$coef["atemp",4]), as.numeric(summary(registered_day)$coef["atemp",4]),as.numeric(summary(registered_end)$coef["atemp",4]))
coef=coef*100
df1=data.frame(coef, p_vals)
colnames(df1)=c("Percent Increase in Bike Rentals For a One Celsius Increase in Adjusted Temperature", "P-Values for Beta Coefficient for Adjusted Temperature ")
rownames(df1)=c("Effect of Temperature on Casual Bikers on a Weekday","Effect of Temperature on Casual Bikers on a Weekend","Effect of Temperature on Registered Bikers on a Weekday","Effect of Temperature on Registered Bikers on a Weekend")
save(df1, file="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/df1.RData")
#what is a good predictive equation for predicting the number of bike rentals in a particular hour in terms of environmental and seasonal variables?
library(leaps)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/BikeSharingDataset.csv")
data=data[,c(3,10,12,13,14,17)]
data$weathersit=as.factor(data$weathersit)
data$season=as.factor(data$season)
data=model.matrix(~., data=data) #converting season to multiple binary variables
data=as.data.frame(data[,-1])
ncol(data)
data.frame(colnames(data))
#Getting rid of outliers
library(MASS)
lm_obj= lm(cnt~.,data=data[,-10])
leverages=hatvalues(lm_obj)
std_err=sqrt(sum(lm_obj$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=lm_obj$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=as.numeric(which(p_vals<.05/nrow(data))) #Observation
data.frame(colnames(data))
outliers
library(MASS)
lm_obj= lm(cnt~.,data=data)
leverages=hatvalues(lm_obj)
std_err=sqrt(sum(lm_obj$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=lm_obj$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=as.numeric(which(p_vals<.05/nrow(data))) #Observation
outlier_reg
500*500
sqrt(25000)
#Creating a binary weekend variable
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/BikeSharingDataset.csv")
end=which(data$weekday==0| data$weekday==6)
day=which(data$weekday!=0 & data$weekday!=6)
data$day_of_week=data$weekday
data$weekday=NULL
data$weekend=rep(0, nrow(data))
data$weekend[end]=1
data$weekend[day]=0
#converting numerical categories to factors
data=data[,-c(1,2,10,16)]
data$weathersit=as.factor(data$weathersit)
data$day_of_week=as.factor(data$day_of_week)
data$season=as.factor(data$season)
data$mnth=as.factor(data$mnth)
data$hr=as.factor(data$hr)
data=model.matrix(~., data=data) #converting season to multiple binary variables
data=as.data.frame(data[-1,])
ncol(data)
#Getting rid of outliers
library(MASS)
lm_obj= lm(lg(cnt+1)~.,data=data)
leverages=hatvalues(lm_obj)
std_err=sqrt(sum(lm_obj$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=lm_obj$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=as.numeric(which(p_vals<.05/nrow(data))) #Observation
library(leaps)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/BikeSharingDataset.csv")
data=data[,c(3,10,12,13,14,17)]
data$weathersit=as.factor(data$weathersit)
data$season=as.factor(data$season)
data=model.matrix(~., data=data) #converting season to multiple binary variables
data=as.data.frame(data[,-1])
#Getting rid of outliers
library(MASS)
lm_obj= lm(log(cnt+1)~.,data=data)
leverages=hatvalues(lm_obj)
std_err=sqrt(sum(lm_obj$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=lm_obj$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=as.numeric(which(p_vals<.05/nrow(data))) #Observ
outlier_reg
#Reading in data and cleaning it
library(leaps)
data=read.csv("/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/BikeSharingDataset.csv")
data=data[,c(3,10,12,13,14,17)] #only taking subset of data that corresponds to environmental/seasonal variables
data$weathersit=as.factor(data$weathersit)
data$season=as.factor(data$season)
data=model.matrix(~., data=data) #converting season to multiple binary variables
data=as.data.frame(data[,-1])
#Getting rid of outliers
library(MASS)
lm_obj= lm(log(cnt+1)~.,data=data)
leverages=hatvalues(lm_obj)
std_err=sqrt(sum(lm_obj$residuals^2)/(nrow(data)-ncol(data)-1))
jacknife=lm_obj$residuals/(std_err*sqrt(1-leverages))
p_vals=1-pt(abs(jacknife), df=100000)
outlier_reg=as.numeric(which(p_vals<.05/nrow(data)))
#Partial Regression Plots without transformation
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/partial_regression.png")
par(mfrow=c(3,1))
y_res_temp=lm(cnt~.,data=data[,-7])$residuals
x_res_temp=lm(atemp~., data=data[,-10])$residuals
plot(x_res_temp,y_res_temp, main="Partial Regression Plot For Adjusted Temperature Variable")
y_res_windspeed=lm(cnt~.,data=data[,-9])$residuals
x_res_windspeed=lm(atemp~., data=data[,-10])$residuals
plot(x_res_windspeed,y_res_windspeed, main="Partial Regression Plot for Windspeed Variable")
y_res_hum=lm(cnt~.,data=data[,-8])$residuals
x_res_hum=lm(atemp~., data=data[,-10])$residuals
plot(x_res_hum,y_res_hum, main="Partial Regression Plot for Humidity Variable")
dev.off()
#Partial Regression Plots with log transformation
png(filename="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/partial_regression_transformed.png")
par(mfrow=c(3,1))
y_res_temp=lm(log(cnt+1)~.,data=data[,-7])$residuals
x_res_temp=lm(atemp~., data=data[,-10])$residuals
plot(x_res_temp,y_res_temp, main="Partial Regression Plot For Adjusted Temperature Variable")
y_res_windspeed=lm(log(cnt+1)~.,data=data[,-9])$residuals
x_res_windspeed=lm(atemp~., data=data[,-10])$residuals
plot(x_res_windspeed,y_res_windspeed, main="Partial Regression Plot for Windspeed Variable")
y_res_hum=lm(log(cnt+1)~.,data=data[,-8])$residuals
x_res_hum=lm(atemp~., data=data[,-10])$residuals
plot(x_res_hum,y_res_hum, main="Partial Regression Plot for Humidity Variable")
dev.off()
##### CALCULATING MSE FOR TRANFORMED REGRESSION ##########
#Doing an exhaustive search to find best number of variables to use
model=summary(regsubsets(log(cnt+1)~.,data=data, nvmax=16))
#Adjusted R-Squared
which.max(model$adjr2) #Tells us to use 9 variables
#AIC
which.min(model$bic-((ncol(data)+1)*log(nrow(data))) + (2*(ncol(data)+1))) #6 variables
#BIC
which.min(model$bic) #6 variables
#Mallow's CP
which.min(model$cp) #9 variables
#Below function does cross validation
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(log(cnt+1)~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=exp(as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ])))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #28817.16
cv_mse(data, c("season2", "season3","season4", "weathersit2","weathersit3", "atemp", "weathersit4", "hum", "windspeed", "cnt"))  #28973.29
#With our transformed regression, using 6 variables is the optimal number to use
#######################################
##### CALCULATING MSE FOR UNTRANFORMED REGRESSION ##########
model1=summary(regsubsets(cnt~.,data=data, nvmax=16))
#Adjusted R-Squared
which.max(model1$adjr2) #Tells us to use 7 variables
#AIC
which.min(model1$bic-((ncol(data)+1)*log(nrow(data))) + (2*(ncol(data)+1))) #6 variables
#BIC
which.min(model1$bic) #6 variables
#Mallow's CP
which.min(model1$cp) #6 variables
cv_mse=function(data, var){
set.seed(0)
mse=vector()
indices=sample(nrow(data))
data=data[indices,]
for(i in 1:10){
m=lm(cnt~., data=data[-c(1:1737 + 1737*(i-1)), var])
y_hat=as.numeric(predict(m, data[c(1:1737 + 1737*(i-1)), ]))
mse[i]=mean((data[c(1:1737 + 1737*(i-1)),"cnt"]-y_hat)^2)
}
return(mean(mse))
}
#comparing mse of recommended variables for each criteria
cv_mse(data, c("season3", "season4", "weathersit2", "atemp", "windspeed", "hum","cnt"))  #23682.54
cv_mse(data, c("season3","season4", "weathersit2", "atemp", "weathersit4", "hum", "windspeed", "cnt")) #23680.92
#With our transformed regression, using 7 variables is the optimal number to use
#######################################
#Creating table to use in report
mse=c(23680.92,28817.16)
df=data.frame(c(mse[1],model1$which[7,-1]), c(mse[2],model$which[6,-1]))
colnames(df)=c("Untransformed Regression", "Transformed Regression")
rownames(df)[1]=c("Mean Squared Error")
save(df, file="/Users/josephfrancia/Desktop/Fall_2016/Stats151a/Takehome/df.RData")
setwd()
getwd()
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3")
getwd()
setwd("/Users/josephfrancia/Desktop/Fall_2016/Stats159/stat159-fall2016-project3/")
